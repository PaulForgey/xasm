1000:01 08        .dw $801
1002:             .or $801
0801:         
0801:             ; 10 SYS 2062
0801:0c 08 0a 00 
                 .dw zero, 10
0805:9e 20 32 30 36 32 00 
                 .db $9e,' 2062',0
080c:         zero:
080c:00 00        .dw 0
080e:         
080e:             *=2062
080e:         
080e:             .in 'zp.asm'
080e:             .fi ; zpAsm
080e:         
080e:             .in 'kernal.asm'
080e:             .fi ; kernalAsm
080e:         
080e:         
080e:         options=$bf00
080e:         
080e:ba           tsx
080f:8e 79 1d     stx asmSP
0812:20 f7 12     jsr ioInit
0815:20 f1 09     jsr symInit
0818:64 40        stz pass
081a:9c 82 1d     stz listOpt
081d:9c 85 1d     stz outOpt
0820:64 44        stz lineIfs
0822:64 45        stz lineIfd
0824:a9 ff        lda #$ff
0826:85 43        sta ePtr
0828:80 0a        bra begin
082a:         
082a:         usage:
082a:a2 92        ldx #<usageStr
082c:a0 09        ldy #>usageStr
082e:20 48 17     jsr ioPrint
0831:4c 7b 09     jmp exit
0834:         
0834:         begin:
0834:64 00        stz $00             ; select system bank for params
0836:a9 04        lda #4
0838:85 01        sta $01             ; select rom bank 4
083a:20 d2 09     jsr getOpt
083d:c9 00        cmp #0
083f:d0 07        bne :got
0841:20 2f 09     jsr askArgs         ; get interactively
0844:c9 00        cmp #0
0846:f0 e2        beq usage
0848:         :got
0848:20 a7 13     jsr ioCopySourceName
084b:8d 7f 1d     sta inputOpt        ; source filename length
084e:8e 80 1d     stx inputName
0851:8c 81 1d     sty inputName+1
0854:         
0854:20 d2 09     jsr getOpt          ; output
0857:c9 00        cmp #0
0859:f0 0c        beq :nooutOpt
085b:20 8f 13     jsr ioCopyDestName
085e:8d 85 1d     sta outOpt          ; dest filename length
0861:8e 86 1d     stx outName
0864:8c 87 1d     sty outName+1
0867:         :nooutOpt
0867:         
0867:20 d2 09     jsr getOpt          ; listing
086a:c9 00        cmp #0
086c:f0 0c        beq :nolistOpt
086e:20 9c 13     jsr ioCopyListName
0871:8d 82 1d     sta listOpt
0874:8e 83 1d     stx listName
0877:8c 84 1d     sty listName+1
087a:         :nolistOpt
087a:         
087a:         asmPass:
087a:64 2d        stz symScope
087c:64 2e        stz symScope+1
087e:         
087e:ae 80 1d     ldx inputName
0881:ac 81 1d     ldy inputName+1
0884:ad 7f 1d     lda inputOpt
0887:20 09 14     jsr ioPush
088a:         
088a:9c 7d 1d     stz pc
088d:a9 10        lda #$10
088f:8d 7e 1d     sta pc+1            ; default pc=$1000
0892:         
0892:a2 bb        ldx #<passStr       ; "pass:n"
0894:a0 09        ldy #>passStr
0896:20 48 17     jsr ioPrint
0899:a5 40        lda pass            ; pass #
089b:29 07        and #$07
089d:1a           inc
089e:20 18 17     jsr ioPrintHex
08a1:a9 0d        lda #13             ; cr
08a3:20 d2 ff     jsr CHROUT
08a6:         
08a6:         :line
08a6:20 ce 16     jsr ioListing       ; possibly show pc for listing
08a9:20 53 15     jsr ioReadLine      ; read next line
08ac:20 88 09     jsr asmError        ; poll for error
08af:ad 78 1d     lda ioLFN           ; check for EOF
08b2:f0 29        beq :next
08b4:         
08b4:20 d1 0e     jsr lineAsm         ; assemble line
08b7:20 88 09     jsr asmError        ; poll for error
08ba:         
08ba:a5 40        lda pass
08bc:10 e8        bpl :line           ; listing output in second pass, if enabled
08be:a5 44        lda lineIfs
08c0:30 e4        bmi :line           ; do not list if'd out 
08c2:         
08c2:20 eb 16     jsr ioPadListing
08c5:         
08c5:a2 00        ldx #0
08c7:         :listLine
08c7:bd 00 21     lda lineBuf,x
08ca:f0 0a        beq :listed         ; eof
08cc:c9 0d        cmp #13
08ce:f0 06        beq :listed         ; cr
08d0:20 04 16     jsr ioEmitBin
08d3:e8           inx
08d4:d0 f1        bne :listLine
08d6:         :listed
08d6:a9 0d        lda #13
08d8:20 04 16     jsr ioEmitBin
08db:80 c9        bra :line
08dd:         
08dd:         :next
08dd:a5 40        lda pass            ; maybe done if non-z pass
08df:d0 21        bne :listing
08e1:1a           inc                 ; pass++
08e2:85 40        sta pass
08e4:         
08e4:ad 85 1d     lda outOpt          ; do we have output?
08e7:f0 19        beq :listing        ; no, skip to listing (if enabled)
08e9:         
08e9:ae 86 1d     ldx outName         ; set up output filename
08ec:ac 87 1d     ldy outName+1
08ef:20 f2 13     jsr ioOpenDest      ; open
08f2:20 88 09     jsr asmError        ; poll for error
08f5:         
08f5:a9 04        lda #<ioEmitBin     ; connect the output hose
08f7:8d 71 1d     sta emit
08fa:a9 16        lda #>ioEmitBin
08fc:8d 72 1d     sta emit+1
08ff:4c 7a 08     jmp asmPass         ; go around again
0902:         
0902:         :listing
0902:20 82 16     jsr ioClose         ; flush and close output or listing
0905:20 88 09     jsr asmError
0908:         
0908:a5 40        lda pass
090a:30 46        bmi asmDone         ; listed, we are done
090c:1a           inc
090d:09 80        ora #$80
090f:85 40        sta pass
0911:         
0911:ad 82 1d     lda listOpt
0914:f0 3c        beq asmDone         ; no listing, we are done
0916:         
0916:ae 83 1d     ldx listName        ; open the listing file  
0919:ac 84 1d     ldy listName+1
091c:         
091c:20 f2 13     jsr ioOpenDest      ; open
091f:20 88 09     jsr asmError        ; poll for error
0922:         
0922:a9 1b        lda #<ioEmitListing
0924:8d 71 1d     sta emit
0927:a9 16        lda #>ioEmitListing
0929:8d 72 1d     sta emit+1
092c:4c 7a 08     jmp asmPass
092f:         
092f:         askArgs:
092f:a9 3f        lda #'?
0931:20 d2 ff     jsr CHROUT
0934:a2 00        ldx #0
0936:86 25        stx optPtr
0938:         :loop
0938:20 cf ff     jsr CHRIN
093b:c9 0d        cmp #13
093d:f0 06        beq :done
093f:9d 00 bf     sta options,x
0942:e8           inx
0943:d0 f3        bne :loop
0945:         :done
0945:9e 00 bf     stz options,x
0948:a9 0d        lda #13             ; cr
094a:20 d2 ff     jsr CHROUT
094d:64 25        stz optPtr
094f:4c d2 09     jmp getOpt
0952:         
0952:         asmDone:
0952:a2 c2        ldx #<symendStr     ; "symend="
0954:a0 09        ldy #>symendStr
0956:20 48 17     jsr ioPrint
0959:a5 42        lda symEnd+1
095b:20 18 17     jsr ioPrintHex
095e:a5 41        lda symEnd
0960:20 18 17     jsr ioPrintHex
0963:a2 cc        ldx #<pcStr         ; "pc="
0965:a0 09        ldy #>pcStr
0967:20 48 17     jsr ioPrint
096a:ad 7e 1d     lda pc+1
096d:20 18 17     jsr ioPrintHex
0970:ad 7d 1d     lda pc
0973:20 18 17     jsr ioPrintHex
0976:a9 0d        lda #13
0978:20 d2 ff     jsr CHROUT
097b:         
097b:         exit:
097b:a2 00        ldx #0              ; zero out options buf on our way out
097d:         :fill
097d:9e 00 bf     stz options,x
0980:e8           inx
0981:d0 fa        bne :fill
0983:ae 79 1d     ldx asmSP           ; get top level stack pointer
0986:9a           txs
0987:60           rts                 ; exit out completely    
0988:         
0988:         asmError:
0988:a5 46        lda error           ; error non-z?
098a:f0 05        beq :fine
098c:20 37 13     jsr ioError         ; print error
098f:80 ea        bra exit            ; abort
0991:         :fine
0991:60           rts
0992:         
0992:         usageStr:
0992:55 53 41 47 45 3a 20 58 
099a:41 53 4d 20 49 4e 50 55 
09a2:54 2e 41 53 4d 5b 3b 4f 
09aa:55 54 50 55 54 5d 5b 3b 
09b2:4c 49 53 54 49 4e 47 5d 
09ba:00           .db 'usage: xasm input.asm[;output][;listing]',0
09bb:         passStr:
09bb:0d 50 41 53 53 3a 00 
                 .db 13,'pass:',0
09c2:         symendStr:
09c2:0d 53 59 4d c5 4e 44 3d 
09ca:24 00        .db 13,'symEnd=$',0
09cc:         pcStr:
09cc:0d 50 43 3d 24 00 
                 .db 13,'pc=$',0
09d2:         
09d2:         ;
09d2:         ; returns next option in a/x/y
09d2:         getOpt:
09d2:a6 25        ldx optPtr
09d4:86 22        stx scratch
09d6:a0 00        ldy #0
09d8:         :loop
09d8:bd 00 bf     lda options,x
09db:f0 0c        beq :got
09dd:c9 0d        cmp #13         ; cr (shouldn't see this, but be defensive)
09df:f0 08        beq :got
09e1:e8           inx
09e2:c9 3b        cmp #';
09e4:f0 03        beq :got
09e6:c8           iny
09e7:d0 ef        bne :loop
09e9:         :got
09e9:98           tya
09ea:86 25        stx optPtr
09ec:a6 22        ldx scratch
09ee:a0 bf        ldy #>options
09f0:60           rts
09f1:          
09f1:             .in 'symtab.asm'
09f1:             .in 'zp.asm'
09f1:             .fi ; zpAsm
09f1:         
09f1:         
09f1:         ;
09f1:         ; initialize hash table
09f1:         symInit:
09f1:a9 00        lda #<symbols
09f3:85 41        sta symEnd
09f5:a9 23        lda #>symbols
09f7:85 42        sta symEnd+1
09f9:a2 00        ldx #0
09fb:         
09fb:         :fill
09fb:9e 00 22     stz hashTable,x
09fe:e8           inx
09ff:d0 fa        bne :fill
0a01:         
0a01:60           rts
0a02:         
0a02:         ; layout of a symbol entry:
0a02:         ; 00-01:    next (0 if end)
0a02:         ; 02-03:    scope (parent entry, or 0)
0a02:         ; 04:       caller status
0a02:         ; 05-06:    value
0a02:         
0a02:         ;
0a02:         ; enter or return existing symbol entry
0a02:         ; result in ptr
0a02:         symGet:
0a02:             ; string = strGet
0a02:             ; nptr = (string).symbols
0a02:20 63 0a     jsr strGet
0a05:a0 02        ldy #2
0a07:b1 27        lda (ptr),y
0a09:85 25        sta nptr
0a0b:a5 27        lda ptr
0a0d:85 23        sta string
0a0f:c8           iny
0a10:b1 27        lda (ptr),y
0a12:85 26        sta nptr+1
0a14:a5 28        lda ptr+1
0a16:85 24        sta string+1
0a18:         
0a18:         :next
0a18:20 07 0b     jsr ptrNext
0a1b:f0 0e        beq :notFound
0a1d:         
0a1d:             ; compare scope
0a1d:b1 27        lda (ptr),y
0a1f:c5 2d        cmp symScope
0a21:d0 f5        bne :next
0a23:c8           iny
0a24:b1 27        lda (ptr),y
0a26:c5 2e        cmp symScope+1
0a28:d0 ee        bne :next
0a2a:         
0a2a:             ; found!
0a2a:60           rts
0a2b:         
0a2b:         :notFound
0a2b:             ; push our scoped entry
0a2b:             ; ptr = symEnd
0a2b:             ; symEnd += 7
0a2b:a9 07        lda #7
0a2d:20 f3 0a     jsr symPush
0a30:         
0a30:         
0a30:             ; nptr = (string).symbols
0a30:             ; (string).symbols = ptr
0a30:a0 02        ldy #2
0a32:b1 23        lda (string),y
0a34:85 25        sta nptr
0a36:a5 27        lda ptr
0a38:91 23        sta (string),y
0a3a:c8           iny
0a3b:         
0a3b:b1 23        lda (string),y
0a3d:85 26        sta nptr+1
0a3f:a5 28        lda ptr+1
0a41:91 23        sta (string),y
0a43:         
0a43:             ; (ptr++)=nptr
0a43:             ; next linkage
0a43:a0 00        ldy #0
0a45:a5 25        lda nptr
0a47:91 27        sta (ptr),y
0a49:c8           iny
0a4a:         
0a4a:a5 26        lda nptr+1
0a4c:91 27        sta (ptr),y
0a4e:c8           iny
0a4f:         
0a4f:             ; (ptr++)=scope
0a4f:a5 2d        lda symScope
0a51:91 27        sta (ptr),y
0a53:c8           iny
0a54:         
0a54:a5 2e        lda symScope+1
0a56:91 27        sta (ptr),y
0a58:c8           iny
0a59:         
0a59:             ; (ptr++)=0
0a59:             ; zero out flags when creating
0a59:a9 00        lda #0
0a5b:91 27        sta (ptr),y
0a5d:c8           iny
0a5e:         
0a5e:             ; (++ptr)=non-zero
0a5e:             ; default value (forward decl) not presumed to be zero page
0a5e:c8           iny
0a5f:98           tya
0a60:91 27        sta (ptr),y
0a62:         
0a62:60           rts
0a63:         
0a63:         
0a63:         ; layout of a string entry:
0a63:         ; 00-01:    next (0 if end)
0a63:         ; 02-03:    symbols having this label
0a63:         ; 04-??:    counted string
0a63:         
0a63:         ;
0a63:         ; enter or return existing counted string
0a63:         ; result in ptr
0a63:         strGet:
0a63:             ; nptr = hash(symLabel)
0a63:20 e2 0a     jsr strHash
0a66:bd 00 22     lda hashTable,x
0a69:85 25        sta nptr
0a6b:bd 01 22     lda hashTable+1,x
0a6e:85 26        sta nptr+1
0a70:         
0a70:         :next
0a70:20 07 0b     jsr ptrNext
0a73:f0 13        beq :notFound
0a75:         
0a75:             ; compare string
0a75:             ; string = ptr+4
0a75:a5 27        lda ptr
0a77:18           clc
0a78:69 04        adc #4
0a7a:85 23        sta string
0a7c:a5 28        lda ptr+1
0a7e:69 00        adc #0
0a80:85 24        sta string+1
0a82:20 1e 0b     jsr strEqual
0a85:d0 e9        bne :next
0a87:         
0a87:             ; found/created, result in ptr
0a87:         :done
0a87:60           rts
0a88:         
0a88:         :notFound
0a88:             ; write new entry to head of list
0a88:             ; nptr = hashEntry
0a88:bd 00 22     lda hashTable,x
0a8b:85 25        sta nptr
0a8d:bd 01 22     lda hashTable+1,x
0a90:85 26        sta nptr+1
0a92:         
0a92:             ; hash = symEnd
0a92:             ; ptr = symEnd
0a92:             ; symEnd += 5 + symLength
0a92:a9 05        lda #5
0a94:20 f3 0a     jsr symPush
0a97:         
0a97:a5 27        lda ptr
0a99:9d 00 22     sta hashTable,x
0a9c:a5 28        lda ptr+1
0a9e:9d 01 22     sta hashTable+1,x
0aa1:         
0aa1:a5 2f        lda symLength
0aa3:20 f3 0a     jsr symPush
0aa6:         
0aa6:             ; (ptr++) = nptr
0aa6:bd 00 22     lda hashTable,x
0aa9:85 27        sta ptr
0aab:bd 01 22     lda hashTable+1,x
0aae:85 28        sta ptr+1
0ab0:             
0ab0:a0 00        ldy #0
0ab2:a5 25        lda nptr
0ab4:91 27        sta (ptr),y
0ab6:c8           iny
0ab7:a5 26        lda nptr+1
0ab9:91 27        sta (ptr),y
0abb:c8           iny
0abc:         
0abc:             ; (ptr++) = $0000
0abc:             ; (symbol entries pointer)
0abc:a9 00        lda #0
0abe:91 27        sta (ptr),y
0ac0:c8           iny
0ac1:91 27        sta (ptr),y
0ac3:c8           iny
0ac4:         
0ac4:             ; (ptr) = symLength
0ac4:a5 2f        lda symLength
0ac6:91 27        sta (ptr),y
0ac8:         
0ac8:             ; string = ptr+5
0ac8:a5 27        lda ptr
0aca:18           clc
0acb:69 05        adc #5
0acd:85 23        sta string
0acf:a5 28        lda ptr+1
0ad1:69 00        adc #0
0ad3:85 24        sta string+1
0ad5:         
0ad5:a0 00        ldy #0
0ad7:         :copy
0ad7:c4 2f        cpy symLength
0ad9:f0 ac        beq :done
0adb:b1 31        lda (symLabel),y
0add:91 23        sta (string),y
0adf:c8           iny
0ae0:d0 f5        bne :copy
0ae2:         
0ae2:         ;
0ae2:         ; compute hash value for counted string
0ae2:         strHash:
0ae2:a5 2f        lda symLength
0ae4:a8           tay
0ae5:18           clc
0ae6:         :loop
0ae6:f0 08        beq :done
0ae8:88           dey
0ae9:2a           rol                 ; c << output << c
0aea:51 31        eor (symLabel),y    ; output = output xor byte
0aec:c8           iny
0aed:88           dey
0aee:d0 f6        bne :loop
0af0:         
0af0:             ; truncate to 7 bit
0af0:         :done
0af0:0a           asl
0af1:aa           tax                 ; result in index form
0af2:60           rts
0af3:         
0af3:         ;
0af3:         ; push symEnd by A bytes
0af3:         ; ptr=symEnd before increment
0af3:         symPush:
0af3:85 22        sta scratch
0af5:a5 41        lda symEnd
0af7:85 27        sta ptr
0af9:18           clc
0afa:65 22        adc scratch
0afc:85 41        sta symEnd
0afe:a5 42        lda symEnd+1
0b00:85 28        sta ptr+1
0b02:69 00        adc #0
0b04:85 42        sta symEnd+1
0b06:60           rts
0b07:         
0b07:         ;
0b07:         ; ptr=nptr, nptr=(ptr)
0b07:         ; Z if nptrH=0
0b07:         ; Y=2 otherwise
0b07:         ptrNext:
0b07:a5 26        lda nptr+1
0b09:f0 12        beq :out            ; nptrH=0
0b0b:85 28        sta ptr+1
0b0d:a5 25        lda nptr
0b0f:85 27        sta ptr
0b11:a0 00        ldy #0
0b13:b1 27        lda (ptr),y
0b15:85 25        sta nptr
0b17:c8           iny
0b18:b1 27        lda (ptr),y         ; Z=0
0b1a:85 26        sta nptr+1
0b1c:c8           iny
0b1d:         :out
0b1d:60           rts
0b1e:         
0b1e:         ;
0b1e:         ; compare counted string at (string) against symLength/symLabel
0b1e:         ; for equality, Z=1 if so
0b1e:         strEqual:
0b1e:a0 00        ldy #0
0b20:b1 23        lda (string),y
0b22:c5 2f        cmp symLength
0b24:d0 0d        bne :out
0b26:         :loop
0b26:c4 2f        cpy symLength
0b28:f0 09        beq :out
0b2a:b1 31        lda (symLabel),y
0b2c:c8           iny
0b2d:d1 23        cmp (string),y
0b2f:d0 02        bne :out
0b31:f0 f3        beq :loop
0b33:         :out
0b33:60           rts
0b34:         
0b34:             .in 'eval.asm'
0b34:             .in 'zp.asm'
0b34:             .fi ; zpAsm
0b34:         
0b34:         
0b34:         esInit  = 0
0b34:         esOp    = 1
0b34:         
0b34:         
0b34:         eDone:
0b34:             ; err if not in esOp state
0b34:18           clc
0b35:a5 3c        lda eState
0b37:f0 01        beq :error
0b39:60           rts
0b3a:         :error
0b3a:38           sec
0b3b:60           rts
0b3c:         
0b3c:         ;
0b3c:         ; normalize petscii in A into lineBuf,x
0b3c:         ePet:
0b3c:85 22        sta scratch
0b3e:29 e0        and #$e0
0b40:c9 60        cmp #$60        ; %011xxxxx -> %110xxxxx
0b42:d0 08        bne :nopet
0b44:a5 22        lda scratch
0b46:49 a0        eor #$a0
0b48:9d 00 21     sta lineBuf,x
0b4b:60           rts
0b4c:         :nopet
0b4c:a5 22        lda scratch
0b4e:60           rts
0b4f:         
0b4f:         ;
0b4f:         ; evaluate expression at lineBuf,x
0b4f:         eEval:
0b4f:64 3c        stz eState
0b51:64 3b        stz eOp
0b53:64 35        stz arg
0b55:64 36        stz arg+1
0b57:20 d5 0d     jsr ePush
0b5a:         
0b5a:         :loop
0b5a:bd 00 21     lda lineBuf,x
0b5d:f0 d5        beq eDone       ; eof
0b5f:c9 2c        cmp #',
0b61:f0 d1        beq eDone
0b63:c9 3b        cmp #';
0b65:f0 cd        beq eDone
0b67:c9 29        cmp #')
0b69:f0 c9        beq eDone
0b6b:         
0b6b:a4 3c        ldy eState
0b6d:d0 26        bne :op
0b6f:         
0b6f:         :init
0b6f:20 09 0e     jsr eIsDec
0b72:b0 4f        bcs :dec
0b74:20 3a 0e     jsr eIsAlpha
0b77:b0 6b        bcs :tosym
0b79:c9 3a        cmp #':
0b7b:f0 67        beq :tosym
0b7d:c9 25        cmp #'%
0b7f:f0 58        beq :bin
0b81:c9 24        cmp #'$
0b83:f0 49        beq :hex
0b85:c9 28        cmp #'(
0b87:f0 65        beq :sub
0b89:c9 2a        cmp #'*
0b8b:f0 71        beq :pc
0b8d:c9 27        cmp #''
0b8f:f0 7a        beq :char
0b91:             
0b91:a0 80        ldy #$80        ; indicate unary
0b93:84 3b        sty eOp
0b95:             ; fall thru
0b95:         
0b95:         :op
0b95:e8           inx
0b96:         
0b96:29 7f        and #$7f        ; normalize petscii whitespace (shift+space)
0b98:c9 21        cmp #33         ; whitespace?
0b9a:90 be        bcc :loop
0b9c:         
0b9c:05 3b        ora eOp         ; push unary or binary op
0b9e:85 3b        sta eOp
0ba0:         
0ba0:c9 3e        cmp #'>
0ba2:f0 0a        beq :optwo
0ba4:             
0ba4:c9 3c        cmp #'<
0ba6:f0 06        beq :optwo
0ba8:         
0ba8:c9 21        cmp #'!
0baa:f0 02        beq :optwo
0bac:             
0bac:80 0e        bra :opone
0bae:         
0bae:         :optwo
0bae:bd 00 21     lda lineBuf,x
0bb1:c9 3d        cmp #'=
0bb3:d0 07        bne :opone 
0bb5:         
0bb5:e8           inx             ; this is >=, <=, or !=
0bb6:a9 40        lda #$40        ; add 64 to indicate = suffix
0bb8:05 3b        ora eOp
0bba:85 3b        sta eOp
0bbc:         
0bbc:         :opone
0bbc:20 d5 0d     jsr ePush
0bbf:64 3c        stz eState
0bc1:80 97        bra :loop
0bc3:         
0bc3:         :dec
0bc3:20 09 0e     jsr eIsDec
0bc6:90 57        bcc :term       ; not a decimal digit?
0bc8:20 74 0d     jsr eDec
0bcb:e8           inx
0bcc:d0 f5        bne :dec
0bce:         
0bce:         :hex
0bce:e8           inx
0bcf:20 1f 0e     jsr eIsHex
0bd2:90 4b        bcc :term       ; not a hex digit?
0bd4:20 a7 0d     jsr eHex
0bd7:80 f5        bra :hex
0bd9:             
0bd9:         :bin
0bd9:e8           inx
0bda:20 30 0e     jsr eIsBin
0bdd:d0 40        bne :term       ; not a binary digit?
0bdf:20 c9 0d     jsr eBin
0be2:80 f5        bra :bin
0be4:         
0be4:         :tosym
0be4:86 3d        stx labelPtr    ; note where it starts
0be6:             
0be6:         :sym
0be6:20 52 0e     jsr eIsSym
0be9:d0 2b        bne :termsym
0beb:e8           inx
0bec:80 f8        bra :sym
0bee:         
0bee:         :sub
0bee:e8           inx             ; skip '('
0bef:20 4f 0b     jsr eEval       ; evaluate subexpression
0bf2:b0 39        bcs :out
0bf4:bd 00 21     lda lineBuf,x
0bf7:c9 29        cmp #')
0bf9:d0 24        bne :term
0bfb:e8           inx             ; consume ')'
0bfc:80 21        bra :term
0bfe:         
0bfe:         :pc
0bfe:e8           inx             ; skip '*'
0bff:ad 7d 1d     lda pc          ; arg=pc
0c02:85 35        sta arg
0c04:ad 7e 1d     lda pc+1
0c07:85 36        sta arg+1
0c09:80 14        bra :term
0c0b:         
0c0b:         :char
0c0b:e8           inx             ; skip '
0c0c:bd 00 21     lda lineBuf,x   ; arg=literal character
0c0f:e8           inx             ; consume
0c10:85 35        sta arg
0c12:64 36        stz arg+1
0c14:80 09        bra :term
0c16:         
0c16:         :termsym
0c16:86 29        stx labelEnd
0c18:20 62 0e     jsr eResolveSym ; resolve label value into arg
0c1b:b0 10        bcs :out
0c1d:a6 29        ldx labelEnd
0c1f:             ; fall thru
0c1f:         
0c1f:         :term
0c1f:20 2e 0c     jsr eExec       ; pop and execute what we have so far
0c22:b0 09        bcs :out
0c24:a9 01        lda #esOp       ; now in op state
0c26:85 3c        sta eState
0c28:64 3b        stz eOp         ; clear op, and not unary
0c2a:4c 5a 0b     jmp :loop
0c2d:         
0c2d:         :out    
0c2d:60           rts
0c2e:         
0c2e:         ;
0c2e:         ; exec term
0c2e:         eExec:
0c2e:20 38 0c     jsr eExecOne
0c31:b0 04        bcs :out
0c33:24 3b        bit eOp
0c35:30 f7        bmi eExec
0c37:         :out
0c37:60           rts
0c38:         
0c38:         eExecOne:
0c38:20 f2 0d     jsr ePop
0c3b:a5 3b        lda eOp
0c3d:f0 63        beq :assign
0c3f:c9 2b        cmp #'+
0c41:f0 61        beq :add
0c43:c9 2d        cmp #'-
0c45:f0 6c        beq :sub
0c47:c9 ad        cmp #$80+'- ; unary -
0c49:f0 68        beq :sub
0c4b:c9 26        cmp #'&
0c4d:f0 73        beq :and
0c4f:c9 5e        cmp #'^
0c51:f0 2e        beq :xorb
0c53:c9 2e        cmp #'.
0c55:f0 79        beq :or
0c57:c9 a1        cmp #$80+'! ; unary '!'
0c59:f0 29        beq :notb
0c5b:c9 bc        cmp #$80+'< ; unary '<'
0c5d:f0 28        beq :lob
0c5f:c9 be        cmp #$80+'> ; unary '>'
0c61:f0 27        beq :hib
0c63:c9 3d        cmp #'=
0c65:f0 26        beq :eqb
0c67:c9 3e        cmp #'>
0c69:f0 25        beq :gtb
0c6b:c9 3c        cmp #'<
0c6d:f0 24        beq :ltb
0c6f:c9 7e        cmp #$40+'> ; >=
0c71:f0 23        beq :geb
0c73:c9 7c        cmp #$40+'< ; <=
0c75:f0 22        beq :leb
0c77:c9 61        cmp #$40+'! ; !=
0c79:f0 21        beq :neb
0c7b:c9 25        cmp #'%
0c7d:f0 20        beq :alignb
0c7f:38           sec
0c80:60           rts
0c81:         
0c81:         :xorb
0c81:4c de 0c     jmp :xor
0c84:         
0c84:         :notb
0c84:4c ec 0c     jmp :not
0c87:         
0c87:         :lob
0c87:4c fe 0c     jmp :lo
0c8a:         
0c8a:         :hib
0c8a:4c fa 0c     jmp :hi
0c8d:         
0c8d:         :eqb
0c8d:4c 02 0d     jmp :eq
0c90:         
0c90:         :gtb
0c90:4c 10 0d     jmp :gt
0c93:         
0c93:         :ltb
0c93:4c 1e 0d     jmp :lt
0c96:         
0c96:         :geb
0c96:4c 2c 0d     jmp :ge
0c99:         
0c99:         :leb
0c99:4c 3a 0d     jmp :le
0c9c:         
0c9c:         :neb
0c9c:4c 48 0d     jmp :ne
0c9f:         
0c9f:         :alignb
0c9f:4c 62 0d     jmp :align
0ca2:         
0ca2:         ;
0ca2:         ; arg=arg
0ca2:         :assign
0ca2:18           clc
0ca3:60           rts
0ca4:         
0ca4:         ;
0ca4:         ; arg+=term
0ca4:         :add
0ca4:a5 35        lda arg
0ca6:18           clc
0ca7:65 37        adc term
0ca9:85 35        sta arg
0cab:a5 36        lda arg+1
0cad:65 38        adc term+1
0caf:85 36        sta arg+1
0cb1:18           clc
0cb2:60           rts
0cb3:         
0cb3:         ;
0cb3:         ; arg=term-arg
0cb3:         :sub
0cb3:a5 37        lda term
0cb5:38           sec
0cb6:e5 35        sbc arg
0cb8:85 35        sta arg
0cba:a5 38        lda term+1
0cbc:e5 36        sbc arg+1
0cbe:85 36        sta arg+1
0cc0:18           clc
0cc1:60           rts
0cc2:         
0cc2:         ;
0cc2:         ; arg&=term
0cc2:         :and
0cc2:a5 35        lda arg
0cc4:25 37        and term
0cc6:85 35        sta arg
0cc8:a5 36        lda arg+1
0cca:25 38        and term+1
0ccc:85 36        sta arg+1
0cce:18           clc
0ccf:60           rts
0cd0:         
0cd0:         ;
0cd0:         ; arg.=term
0cd0:         :or
0cd0:a5 35        lda arg
0cd2:05 37        ora term
0cd4:85 35        sta arg
0cd6:a5 36        lda arg+1
0cd8:05 38        ora term+1
0cda:85 36        sta arg+1
0cdc:18           clc
0cdd:60           rts
0cde:         
0cde:         ;
0cde:         ; arg^=term
0cde:         :xor
0cde:a5 35        lda arg
0ce0:45 37        eor term
0ce2:85 35        sta arg
0ce4:a5 36        lda arg+1
0ce6:45 38        eor term+1
0ce8:85 36        sta arg+1
0cea:18           clc
0ceb:60           rts
0cec:         
0cec:         ;
0cec:         ; arg=!arg
0cec:         :not
0cec:a5 35        lda arg
0cee:49 ff        eor #$ff
0cf0:85 35        sta arg
0cf2:a5 36        lda arg+1
0cf4:49 ff        eor #$ff
0cf6:85 36        sta arg+1
0cf8:18           clc
0cf9:60           rts
0cfa:         
0cfa:         ;
0cfa:         ; arg=>arg
0cfa:         :hi
0cfa:a5 36        lda arg+1
0cfc:85 35        sta arg
0cfe:             ; fall thru
0cfe:         
0cfe:         ;
0cfe:         ; arg=<arg
0cfe:         :lo
0cfe:64 36        stz arg+1
0d00:18           clc
0d01:60           rts
0d02:         
0d02:         ;
0d02:         ; arg=term?
0d02:         :eq
0d02:a5 35        lda arg
0d04:c5 37        cmp term
0d06:d0 54        bne :false
0d08:a5 36        lda arg+1
0d0a:c5 38        cmp term+1
0d0c:d0 4e        bne :false
0d0e:80 44        bra :true
0d10:         
0d10:         ;
0d10:         ; term>arg?
0d10:         :gt
0d10:a5 36        lda arg+1
0d12:c5 38        cmp term+1
0d14:90 3e        bcc :true
0d16:a5 35        lda arg
0d18:c5 37        cmp term
0d1a:90 38        bcc :true
0d1c:80 3e        bra :false
0d1e:         
0d1e:         ;
0d1e:         ; term<arg?
0d1e:         :lt
0d1e:a5 38        lda term+1
0d20:c5 36        cmp arg+1
0d22:90 30        bcc :true
0d24:a5 37        lda term
0d26:c5 35        cmp arg
0d28:90 2a        bcc :true
0d2a:80 30        bra :false
0d2c:         
0d2c:         ;
0d2c:         ; term>=arg?
0d2c:         :ge
0d2c:a5 38        lda term+1
0d2e:c5 36        cmp arg+1
0d30:90 2a        bcc :false
0d32:a5 37        lda term
0d34:c5 35        cmp arg
0d36:90 24        bcc :false
0d38:80 1a        bra :true
0d3a:         
0d3a:         ; term<=arg?
0d3a:         :le
0d3a:a5 36        lda arg+1
0d3c:c5 38        cmp term+1
0d3e:90 1c        bcc :false
0d40:a5 35        lda arg
0d42:c5 37        cmp term
0d44:90 16        bcc :false
0d46:80 0c        bra :true
0d48:         
0d48:         ; term!=arg?
0d48:         :ne
0d48:a5 36        lda arg+1
0d4a:c5 38        cmp term+1
0d4c:d0 06        bne :true
0d4e:a5 35        lda arg
0d50:c5 37        cmp term
0d52:f0 08        beq :false
0d54:         
0d54:         :true
0d54:a9 ff        lda #$ff
0d56:85 35        sta arg
0d58:85 36        sta arg+1
0d5a:18           clc
0d5b:60           rts
0d5c:         
0d5c:         :false
0d5c:64 35        stz arg
0d5e:64 36        stz arg+1
0d60:18           clc
0d61:60           rts
0d62:         
0d62:         ; arg=term%arg
0d62:         :align              ; limited to $100 max
0d62:c6 35        dec arg
0d64:a5 35        lda arg
0d66:25 37        and term
0d68:45 35        eor arg
0d6a:1a           inc
0d6b:25 35        and arg
0d6d:85 35        sta arg
0d6f:64 36        stz arg+1
0d71:4c a4 0c     jmp :add
0d74:         
0d74:         ;
0d74:         ; add decimal digit in lineBuf,x to arg
0d74:         eDec:
0d74:a5 35        lda arg         ; scratch=arg*8
0d76:0a           asl
0d77:85 22        sta scratch
0d79:a5 36        lda arg+1
0d7b:2a           rol
0d7c:85 23        sta scratch+1
0d7e:         
0d7e:06 22        asl scratch
0d80:26 23        rol scratch+1
0d82:06 22        asl scratch
0d84:26 23        rol scratch+1
0d86:         
0d86:06 35        asl arg         ; arg=arg*2
0d88:26 36        rol arg+1
0d8a:         
0d8a:a5 35        lda arg         ; arg=arg+scratch
0d8c:18           clc
0d8d:65 22        adc scratch
0d8f:85 35        sta arg
0d91:a5 36        lda arg+1
0d93:65 23        adc scratch+1
0d95:85 36        sta arg+1
0d97:         
0d97:bd 00 21     lda lineBuf,x
0d9a:38           sec
0d9b:e9 30        sbc #'0
0d9d:18           clc
0d9e:65 35        adc arg
0da0:85 35        sta arg
0da2:90 02        bcc :out
0da4:e6 36        inc arg+1
0da6:         :out
0da6:60           rts
0da7:         
0da7:         ;
0da7:         ; add hex digit in lineBuf,x to arg
0da7:         eHex:
0da7:06 35        asl arg
0da9:26 36        rol arg+1
0dab:06 35        asl arg
0dad:26 36        rol arg+1
0daf:06 35        asl arg
0db1:26 36        rol arg+1
0db3:06 35        asl arg
0db5:26 36        rol arg+1
0db7:         
0db7:bd 00 21     lda lineBuf,x
0dba:38           sec
0dbb:e9 3a        sbc #'9+1
0dbd:90 03        bcc :digit
0dbf:e9 07        sbc #7
0dc1:18           clc
0dc2:         :digit
0dc2:69 0a        adc #10
0dc4:         
0dc4:05 35        ora arg
0dc6:85 35        sta arg
0dc8:60           rts
0dc9:         
0dc9:         ;
0dc9:         ; add binary digit in lineBuf,x to arg
0dc9:         eBin:
0dc9:06 35        asl arg
0dcb:26 36        rol arg+1
0dcd:38           sec
0dce:e9 30        sbc #'0
0dd0:05 35        ora arg
0dd2:85 35        sta arg
0dd4:60           rts
0dd5:         
0dd5:         ;
0dd5:         ; push arg,op,state
0dd5:         ePush:
0dd5:a4 43        ldy ePtr
0dd7:         
0dd7:a5 3b        lda eOp
0dd9:99 00 20     sta eStack,y
0ddc:88           dey
0ddd:         
0ddd:a5 36        lda arg+1
0ddf:99 00 20     sta eStack,y
0de2:88           dey
0de3:         
0de3:a5 35        lda arg
0de5:99 00 20     sta eStack,y
0de8:88           dey
0de9:         
0de9:84 43        sty ePtr
0deb:         
0deb:64 3b        stz eOp
0ded:64 35        stz arg
0def:64 36        stz arg+1
0df1:60           rts
0df2:         
0df2:         ;
0df2:         ; pop term,op,state
0df2:         ePop:
0df2:a4 43        ldy ePtr
0df4:         
0df4:c8           iny
0df5:b9 00 20     lda eStack,y
0df8:85 37        sta term
0dfa:         
0dfa:c8           iny
0dfb:b9 00 20     lda eStack,y
0dfe:85 38        sta term+1
0e00:         
0e00:c8           iny
0e01:b9 00 20     lda eStack,y
0e04:85 3b        sta eOp
0e06:         
0e06:84 43        sty ePtr
0e08:60           rts
0e09:         
0e09:         ;
0e09:         ; test if lineBuf,x is decimal digit
0e09:         ; C=1 if so
0e09:         eIsDec:
0e09:bd 00 21     lda lineBuf,x
0e0c:c9 3a        cmp #'9+1
0e0e:b0 03        bcs eIsNot
0e10:         
0e10:c9 30        cmp #'0
0e12:60           rts
0e13:         
0e13:         eIsNot:
0e13:18           clc
0e14:60           rts
0e15:         
0e15:         ;
0e15:         ; test if lineBuf,x is octal digit
0e15:         ; C=1 if so, also returns char in A
0e15:         eIsOct:
0e15:bd 00 21     lda lineBuf,x
0e18:c9 38        cmp #'7+1
0e1a:b0 f7        bcs eIsNot
0e1c:         
0e1c:c9 30        cmp #'0
0e1e:60           rts
0e1f:         
0e1f:         ;
0e1f:         ; test if lineBuf,x is hex digit
0e1f:         ; C=1 if so
0e1f:         ; side effect: uppercase normalized
0e1f:         eIsHex:
0e1f:20 09 0e     jsr eIsDec
0e22:b0 0b        bcs :out
0e24:20 3c 0b     jsr ePet
0e27:29 7f        and #$7f
0e29:         
0e29:c9 47        cmp #'f+1
0e2b:b0 e6        bcs eIsNot
0e2d:         
0e2d:c9 41        cmp #'a
0e2f:         :out
0e2f:60           rts
0e30:         
0e30:         ;
0e30:         ; test if lineBuf,x is binary digit
0e30:         ; Z=1 if so
0e30:         eIsBin:
0e30:bd 00 21     lda lineBuf,x
0e33:c9 31        cmp #'1
0e35:f0 02        beq :out
0e37:c9 30        cmp #'0
0e39:         :out
0e39:60           rts
0e3a:         
0e3a:         ;
0e3a:         ; test if lineBuf,X is alpha
0e3a:         ; C=1 if so
0e3a:         eIsAlpha:
0e3a:bd 00 21     lda lineBuf,x
0e3d:20 3c 0b     jsr ePet
0e40:         
0e40:c9 db        cmp #'z+128+1   ; 'Z'
0e42:b0 cf        bcs eIsNot      ; > 'Z'
0e44:         
0e44:c9 41        cmp #'a
0e46:90 09        bcc :out        ; < 'a'
0e48:         
0e48:c9 c1        cmp #'a+128     ; 'A'
0e4a:b0 05        bcs :out        ; >= 'A' and <= 'Z'
0e4c:         
0e4c:c9 5b        cmp #'z+1
0e4e:b0 c3        bcs eIsNot      ; > 'z'
0e50:         
0e50:38           sec
0e51:         :out
0e51:60           rts
0e52:         
0e52:         ;
0e52:         ; test if lineBuf,x is a valid symbol character
0e52:         ; Z=1 if so
0e52:         eIsSym:
0e52:20 3a 0e     jsr eIsAlpha
0e55:b0 08        bcs :yes
0e57:20 09 0e     jsr eIsDec
0e5a:b0 03        bcs :yes
0e5c:c9 3a        cmp #':
0e5e:60           rts
0e5f:         :yes
0e5f:89 00        bit #0          ; set zero
0e61:60           rts
0e62:         
0e62:         ;
0e62:         ; resolve label from lineBuf into arg
0e62:         eResolveSym:
0e62:a5 2d        lda symScope    ; note our current scope
0e64:8d 88 1d     sta tScope
0e67:a5 2e        lda symScope+1
0e69:8d 89 1d     sta tScope+1
0e6c:         
0e6c:a4 3d        ldy labelPtr    ; start of label sequence
0e6e:b9 00 21     lda lineBuf,y
0e71:c9 3a        cmp #':
0e73:f0 04        beq :loop
0e75:         
0e75:64 2d        stz symScope    ; global scope
0e77:64 2e        stz symScope+1
0e79:         
0e79:         :loop
0e79:20 b4 0e     jsr :next
0e7c:a5 2f        lda symLength
0e7e:f0 0f        beq :skip       ; empty label in sequence means do not adjust scope
0e80:         
0e80:84 2b        sty emitY
0e82:20 02 0a     jsr symGet
0e85:a4 2b        ldy emitY
0e87:         
0e87:a5 27        lda ptr
0e89:85 2d        sta symScope
0e8b:a5 28        lda ptr+1
0e8d:85 2e        sta symScope+1
0e8f:         
0e8f:         :skip
0e8f:c4 29        cpy labelEnd
0e91:d0 e6        bne :loop
0e93:         
0e93:         :done
0e93:18           clc
0e94:a0 04        ldy #4
0e96:b1 27        lda (ptr),y     ; no forward reference in pass >0
0e98:d0 05        bne :fine
0e9a:a5 40        lda pass
0e9c:f0 01        beq :fine
0e9e:38           sec             ; set error
0e9f:         
0e9f:         :fine
0e9f:c8           iny             ; symbol value in arg
0ea0:b1 27        lda (ptr),y
0ea2:85 35        sta arg
0ea4:c8           iny
0ea5:b1 27        lda (ptr),y
0ea7:85 36        sta arg+1
0ea9:         
0ea9:ad 88 1d     lda tScope      ; put scope back
0eac:85 2d        sta symScope
0eae:ad 89 1d     lda tScope+1
0eb1:85 2e        sta symScope+1
0eb3:         
0eb3:60           rts
0eb4:         
0eb4:         :next
0eb4:98           tya             ; point symLabel at lineBuf+y
0eb5:18           clc
0eb6:69 00        adc #<lineBuf
0eb8:85 31        sta symLabel
0eba:a9 00        lda #0
0ebc:69 21        adc #>lineBuf
0ebe:85 32        sta symLabel+1
0ec0:64 2f        stz symLength   ; reset length=0
0ec2:         
0ec2:         :search
0ec2:b9 00 21     lda lineBuf,y
0ec5:c8           iny
0ec6:c9 3a        cmp #':
0ec8:f0 06        beq :out        ; colon terminate at scope seperator
0eca:e6 2f        inc symLength
0ecc:c4 29        cpy labelEnd
0ece:d0 f2        bne :search
0ed0:         :out
0ed0:60           rts
0ed1:         
0ed1:             .in 'line.asm'
0ed1:             .in 'zp.asm'
0ed1:             .fi ; zpAsm
0ed1:         
0ed1:             .in 'mode.asm'
0ed1:             .fi ; modeAsm
0ed1:         
0ed1:         
0ed1:         
0ed1:         ;
0ed1:         ; assembles lineBuf
0ed1:         lineAsm:
0ed1:ba           tsx
0ed2:8e 7a 1d     stx lineSP
0ed5:64 35        stz arg
0ed7:64 36        stz arg+1
0ed9:a2 00        ldx #0
0edb:         
0edb:         :start
0edb:bd 00 21     lda lineBuf,x
0ede:20 3c 0b     jsr ePet
0ee1:20 52 0e     jsr eIsSym
0ee4:d0 03        bne :label
0ee6:e8           inx
0ee7:d0 f2        bne :start
0ee9:         :label
0ee9:64 27        stz ptr         ; assume no label yet
0eeb:64 28        stz ptr+1
0eed:         
0eed:86 29        stx labelEnd
0eef:e0 00        cpx #0          ; no label
0ef1:f0 07        beq :post
0ef3:         
0ef3:24 44        bit lineIfs     ; test if we are if'd out
0ef5:30 03        bmi :post
0ef7:         
0ef7:20 da 10     jsr linePinLabel
0efa:         
0efa:         :post
0efa:20 c1 12     jsr lineNextTokenExit
0efd:         
0efd:c9 3d        cmp #'=
0eff:d0 1e        bne :op
0f01:         
0f01:24 44        bit lineIfs
0f03:30 5f        bmi :opdone
0f05:         
0f05:e8           inx             ; skip '='
0f06:a5 27        lda ptr
0f08:85 39        sta assign      ; assign=ptr
0f0a:a5 28        lda ptr+1
0f0c:f0 23        beq :assignError
0f0e:85 3a        sta assign+1
0f10:         
0f10:20 eb 12     jsr lineEval    ; eval rhs
0f13:         
0f13:a0 05        ldy #5          ; store evaluated result
0f15:a5 35        lda arg
0f17:91 39        sta (assign),y
0f19:c8           iny
0f1a:a5 36        lda arg+1
0f1c:91 39        sta (assign),y
0f1e:60           rts
0f1f:         
0f1f:         :op
0f1f:bd 00 21     lda lineBuf,x
0f22:c9 2a        cmp #'*
0f24:f0 15        beq :star
0f26:c9 2e        cmp #'.
0f28:f0 3b        beq :dot
0f2a:         
0f2a:24 44        bit lineIfs
0f2c:30 36        bmi :opdone     ; if'd out
0f2e:         
0f2e:4c 35 11     jmp lineIsn
0f31:         
0f31:         :assignError
0f31:a9 0a        lda #errors:assign
0f33:85 46        sta error
0f35:60           rts
0f36:         
0f36:         :backwardError
0f36:a9 06        lda #errors:backward
0f38:85 46        sta error
0f3a:60           rts
0f3b:         
0f3b:         :star
0f3b:e8           inx             ; skip '*'
0f3c:20 c1 12     jsr lineNextTokenExit
0f3f:c9 3d        cmp #'=
0f41:d0 21        bne :opdone
0f43:e8           inx             ; consume '='
0f44:e6 40        inc pass        ; cannot be forward reference
0f46:20 eb 12     jsr lineEval
0f49:c6 40        dec pass
0f4b:         
0f4b:         :starloop
0f4b:a5 36        lda arg+1
0f4d:cd 7e 1d     cmp pc+1
0f50:90 e4        bcc :backwardError
0f52:d0 09        bne :stardo
0f54:a5 35        lda arg
0f56:cd 7d 1d     cmp pc
0f59:90 db        bcc :backwardError
0f5b:f0 07        beq :stardone
0f5d:         :stardo
0f5d:a9 00        lda #0
0f5f:20 2a 11     jsr lineEmit    ; emit zeros until desired pc
0f62:80 e7        bra :starloop
0f64:         
0f64:         :stardone
0f64:         :opdone
0f64:60           rts
0f65:         
0f65:         :dot
0f65:e8           inx             ; skip '.'
0f66:bd 01 21     lda lineBuf+1,x
0f69:a8           tay             ; second char in Y
0f6a:bd 00 21     lda lineBuf,x   ; first char in A
0f6d:e8           inx
0f6e:e8           inx             ; skip the two (if not present, we will err anyway)
0f6f:         
0f6f:c9 45        cmp #'e
0f71:f0 19        beq :E
0f73:c9 46        cmp #'f
0f75:f0 1f        beq :F
0f77:c9 49        cmp #'i
0f79:f0 27        beq :I
0f7b:         
0f7b:24 44        bit lineIfs
0f7d:30 e5        bmi :opdone     ; if'd out
0f7f:         
0f7f:c9 4f        cmp #'o
0f81:f0 19        beq :O
0f83:c9 44        cmp #'d
0f85:f0 2d        beq :D
0f87:             ; fall thru
0f87:         
0f87:         :dotOpError
0f87:a9 0c        lda #errors:dotOp
0f89:85 46        sta error
0f8b:60           rts
0f8c:         
0f8c:         :E
0f8c:c0 49        cpy #'i
0f8e:f0 5b        beq :EI
0f90:c0 4c        cpy #'l
0f92:f0 43        beq :EL
0f94:80 f1        bra :dotOpError
0f96:         
0f96:         :F
0f96:c0 49        cpy #'i
0f98:f0 73        beq :FI
0f9a:80 eb        bra :dotOpError
0f9c:         
0f9c:         :O
0f9c:c0 52        cpy #'r
0f9e:f0 22        beq :ORb
0fa0:80 e5        bra :dotOpError
0fa2:         
0fa2:         :I
0fa2:c0 46        cpy #'f
0fa4:f0 1f        beq :IFb
0fa6:             
0fa6:24 44        bit lineIfs
0fa8:30 ba        bmi :opdone     ; if'd out
0faa:             
0faa:c0 4e        cpy #'n
0fac:f0 1a        beq :INb
0fae:c0 42        cpy #'b
0fb0:f0 19        beq :IBb
0fb2:80 d3        bra :dotOpError
0fb4:           
0fb4:         :D
0fb4:c0 42        cpy #'b
0fb6:f0 16        beq :DBb
0fb8:c0 57        cpy #'w
0fba:f0 15        beq :DWb
0fbc:c0 46        cpy #'f
0fbe:f0 14        beq :DFb
0fc0:80 c5        bra :dotOpError
0fc2:         
0fc2:         :ORb
0fc2:4c 95 10     jmp :OR
0fc5:         
0fc5:         :IFb
0fc5:4c b5 10     jmp :IF
0fc8:         
0fc8:         :INb
0fc8:4c a6 10     jmp :IN
0fcb:             
0fcb:         :IBb
0fcb:4c ac 10     jmp :IB
0fce:             
0fce:         :DBb
0fce:4c 14 10     jmp :DB
0fd1:             
0fd1:         :DWb
0fd1:4c 3e 10     jmp :DW
0fd4:         
0fd4:         :DFb
0fd4:4c 57 10     jmp :DF
0fd7:         
0fd7:         :EL
0fd7:24 45        bit lineIfd     ; have we chosen our destiny
0fd9:10 07        bpl :else
0fdb:a9 80        lda #$80        ; prior destiny has already been set
0fdd:04 44        tsb lineIfs
0fdf:4c d3 12     jmp lineAssertEnd
0fe2:         
0fe2:         :else
0fe2:a5 44        lda lineIfs     ; flip top if bit
0fe4:49 80        eor #$80
0fe6:85 44        sta lineIfs
0fe8:4c d3 12     jmp lineAssertEnd
0feb:         
0feb:         :EI
0feb:20 df 12     jsr lineAssertToken
0fee:         
0fee:24 45        bit lineIfd     ; have we chosen our destiny
0ff0:10 05        bpl :elseif
0ff2:a9 80        lda #$80        ; stay false
0ff4:04 44        tsb lineIfs     ; prior destiny has already been set
0ff6:60           rts
0ff7:         
0ff7:         :elseif
0ff7:20 eb 12     jsr lineEval
0ffa:20 1d 11     jsr lineTruth
0ffd:06 44        asl lineIfs
0fff:a5 36        lda arg+1       ; top of ifs stack becomes condition
1001:29 80        and #$80
1003:04 45        tsb lineIfd     ; destiny set
1005:49 80        eor #$80
1007:0a           asl
1008:66 44        ror lineIfs
100a:4c d3 12     jmp lineAssertEnd
100d:         
100d:         :FI
100d:06 44        asl lineIfs     ; pop if stack
100f:06 45        asl lineIfd     ; pop destiny stack
1011:4c d3 12     jmp lineAssertEnd
1014:         
1014:         :DB
1014:64 35        stz arg
1016:20 c1 12     jsr lineNextTokenExit
1019:c9 27        cmp #''
101b:f0 11        beq :string
101d:c9 2c        cmp #',
101f:f0 0a        beq :DBcomma
1021:         
1021:20 eb 12     jsr lineEval
1024:a5 35        lda arg         ; send it
1026:20 2a 11     jsr lineEmit
1029:         
1029:80 e9        bra :DB
102b:         
102b:         :DBcomma
102b:e8           inx             ; consume ',' ready for next
102c:80 e6        bra :DB
102e:         
102e:         :string
102e:e8           inx
102f:bd 00 21     lda lineBuf,x
1032:f0 09        beq :stringEOF
1034:c9 27        cmp #''
1036:f0 f3        beq :DBcomma
1038:         
1038:20 2a 11     jsr lineEmit    ; send it
103b:80 f1        bra :string
103d:         :stringEOF
103d:60           rts
103e:         
103e:         :DW
103e:20 c1 12     jsr lineNextTokenExit
1041:c9 2c        cmp #',
1043:f0 0f        beq :DWcomma
1045:         
1045:20 eb 12     jsr lineEval
1048:         
1048:a5 35        lda arg         ; send it
104a:20 2a 11     jsr lineEmit
104d:a5 36        lda arg+1
104f:20 2a 11     jsr lineEmit
1052:         
1052:80 ea        bra :DW
1054:         
1054:         :DWcomma
1054:e8           inx             ; consume ',' ready for next word
1055:80 e7        bra :DW
1057:         
1057:         :DF
1057:20 c1 12     jsr lineNextTokenExit
105a:         
105a:86 2a        stx emitX
105c:         :DFscan
105c:20 a4 12     jsr lineEnd
105f:f0 07        beq :DFscanned
1061:c9 2c        cmp #',
1063:f0 03        beq :DFscanned
1065:e8           inx
1066:d0 f4        bne :DFscan
1068:         
1068:         :DFscanned
1068:86 22        stx scratch
106a:8a           txa
106b:38           sec
106c:e5 2a        sbc emitX       ; A: length
106e:a6 2a        ldx emitX       ; X/Y: string
1070:a0 21        ldy #>lineBuf
1072:20 09 fe     jsr VAL1
1075:a2 6c        ldx #<fpack
1077:a0 1d        ldy #>fpack
1079:20 66 fe     jsr MOVMF       ; pack FACC->constant
107c:         
107c:a6 22        ldx scratch     ; get X back
107e:a0 00        ldy #0
1080:         
1080:         :DFemit
1080:b9 6c 1d     lda fpack,y     ; write 5 byte packed output
1083:20 2a 11     jsr lineEmit
1086:c8           iny
1087:c0 05        cpy #5
1089:d0 f5        bne :DFemit
108b:         
108b:         :DFnext
108b:bd 00 21     lda lineBuf,x
108e:c9 2c        cmp #',
1090:d0 c5        bne :DF
1092:e8           inx             ; consume ,
1093:80 c2        bra :DF
1095:         
1095:         :OR
1095:20 df 12     jsr lineAssertToken
1098:         
1098:20 eb 12     jsr lineEval
109b:         
109b:a5 35        lda arg
109d:8d 7d 1d     sta pc
10a0:a5 36        lda arg+1
10a2:8d 7e 1d     sta pc+1
10a5:60           rts
10a6:         
10a6:         :IN
10a6:20 7f 12     jsr lineGetName
10a9:4c 09 14     jmp ioPush
10ac:         
10ac:         :IB
10ac:20 7f 12     jsr lineGetName
10af:20 09 14     jsr ioPush
10b2:4c ee 15     jmp ioCopy
10b5:         
10b5:         :IF
10b5:20 df 12     jsr lineAssertToken
10b8:         
10b8:24 44        bit lineIfs
10ba:30 17        bmi :falseIf
10bc:         
10bc:20 eb 12     jsr lineEval
10bf:20 1d 11     jsr lineTruth
10c2:a5 36        lda arg+1
10c4:29 80        and #$80
10c6:0a           asl
10c7:66 45        ror lineIfd     ; desinty set
10c9:a5 36        lda arg+1
10cb:49 80        eor #$80
10cd:0a           asl             ; truth->C
10ce:66 44        ror lineIfs     ; push if stack
10d0:4c d3 12     jmp lineAssertEnd
10d3:         
10d3:         :falseIf
10d3:38           sec
10d4:66 44        ror lineIfs     ; stay in false state
10d6:38           sec
10d7:66 45        ror lineIfd     ; and this is our destiny at this level
10d9:60           rts
10da:         
10da:         ;
10da:         ; resolve label field into ptr, adjusting symScope if necessary
10da:         linePinLabel:
10da:64 3d        stz labelPtr
10dc:20 62 0e     jsr eResolveSym
10df:ad 00 21     lda lineBuf
10e2:c9 3a        cmp #58         ; ':'
10e4:f0 08        beq :local
10e6:a5 27        lda ptr
10e8:85 2d        sta symScope    ; this becomes our new scope
10ea:a5 28        lda ptr+1
10ec:85 2e        sta symScope+1
10ee:         :local
10ee:a5 40        lda pass
10f0:d0 1a        bne :out        ; if pass >0, just return it
10f2:24 44        bit lineIfs
10f4:30 16        bmi :out        ; if'd out, just return it
10f6:a0 04        ldy #4
10f8:b1 27        lda (ptr),y
10fa:d0 13        bne :dupLabel
10fc:a9 01        lda #1
10fe:91 27        sta (ptr),y
1100:c8           iny
1101:ad 7d 1d     lda pc
1104:91 27        sta (ptr),y     ; initially store pc
1106:c8           iny
1107:ad 7e 1d     lda pc+1
110a:91 27        sta (ptr),y     ; may be set later with =expr
110c:         :out
110c:a6 29        ldx labelEnd    ; restore x
110e:60           rts
110f:         
110f:         :dupLabel
110f:a9 02        lda #errors:dupLabel
1111:85 46        sta error
1113:4c c6 12     jmp lineExit
1116:         
1116:         lineEmitError:
1116:a9 18        lda #errors:emit
1118:85 46        sta error
111a:4c c6 12     jmp lineExit
111d:         
111d:         ;
111d:         ; normalize non-0 to $8xxx for if checking
111d:         lineTruth:
111d:a9 ff        lda #$ff
111f:24 35        bit arg
1121:d0 04        bne :true
1123:24 36        bit arg+1
1125:f0 02        beq :false
1127:         :true
1127:85 36        sta arg+1
1129:         :false
1129:60           rts
112a:         
112a:         ;
112a:         ; emit byte
112a:         ; pc incremented, (emit) called
112a:         lineEmit:
112a:20 2c 13     jsr ioEmit
112d:b0 e7        bcs lineEmitError
112f:60           rts
1130:         
1130:         lineOpError:
1130:a9 0e        lda #errors:op
1132:85 46        sta error
1134:60           rts
1135:         
1135:         ;
1135:         ; isn (arg) part
1135:         lineIsn:
1135:20 63 18     jsr isnGet
1138:b0 f6        bcs lineOpError
113a:a9 07        lda #modeImp
113c:85 34        sta isnMode     ; assume implied
113e:64 2c        stz isnBit      ; start not assuming bit instruction
1140:e8           inx             ; skip isn
1141:e8           inx
1142:e8           inx
1143:20 15 0e     jsr eIsOct      ; test for bit number
1146:90 03        bcc :notbitn
1148:85 2c        sta isnBit      ; '0'-'7' if this is a bitn
114a:e8           inx
114b:         
114b:         :notbitn
114b:20 ac 12     jsr lineNextToken
114e:f0 47        beq :gob        ; implied
1150:c9 23        cmp #'#
1152:f0 46        beq :imm
1154:c9 28        cmp #'(
1156:f0 4c        beq :ind
1158:         
1158:20 eb 12     jsr lineEval
115b:         
115b:a9 00        lda #modeAbs    ; abs (so far)
115d:85 34        sta isnMode
115f:         
115f:bd 00 21     lda lineBuf,x
1162:c9 2c        cmp #',
1164:d0 31        bne :gob
1166:e8           inx             ; consume ,
1167:bd 00 21     lda lineBuf,x
116a:20 3c 0b     jsr ePet
116d:29 7f        and #$7f        ; normalize case
116f:c9 58        cmp #'x
1171:f0 18        beq :absx
1173:c9 59        cmp #'y
1175:f0 1b        beq :absy
1177:         
1177:a5 35        lda arg
1179:8d 7b 1d     sta argZ        ; zp,rel
117c:20 eb 12     jsr lineEval
117f:         
117f:a9 09        lda #modeBitRel
1181:85 34        sta isnMode
1183:4c ef 11     jmp :go
1186:         
1186:         :modeError:
1186:a9 10        lda #errors:mode
1188:85 46        sta error
118a:60           rts
118b:         
118b:         :absx
118b:e8           inx             ; consume 'x'
118c:a9 02        lda #modeAbsX   ; abs,x
118e:85 34        sta isnMode
1190:80 05        bra :gob
1192:         
1192:         :absy
1192:e8           inx             ; consume 'y'
1193:a9 03        lda #modeAbsY   ; abs,y
1195:85 34        sta isnMode
1197:             ; fall thru
1197:         
1197:         :gob
1197:4c ef 11     jmp :go
119a:         
119a:         :imm
119a:e8           inx             ; skip #
119b:20 eb 12     jsr lineEval
119e:         
119e:a9 06        lda #modeImm    ; imm
11a0:85 34        sta isnMode
11a2:80 4b        bra :go
11a4:         
11a4:         :ind
11a4:e8           inx             ; skip (
11a5:20 eb 12     jsr lineEval
11a8:             
11a8:a9 04        lda #modeAbsInd ; indirect
11aa:85 34        sta isnMode
11ac:             
11ac:bd 00 21     lda lineBuf,x
11af:c9 2c        cmp #',
11b1:f0 06        beq :indx
11b3:c9 29        cmp #')
11b5:f0 1e        beq :indy
11b7:             
11b7:80 cd        bra :modeError
11b9:             
11b9:         :indx
11b9:e8           inx             ; skip ,
11ba:bd 00 21     lda lineBuf,x
11bd:20 3c 0b     jsr ePet
11c0:29 7f        and #$7f
11c2:c9 58        cmp #'x
11c4:d0 c0        bne :modeError
11c6:e8           inx
11c7:bd 00 21     lda lineBuf,x
11ca:c9 29        cmp #')
11cc:d0 b8        bne :modeError
11ce:e8           inx
11cf:         
11cf:a9 01        lda #modeAbsIndX ; (ind,x)
11d1:85 34        sta isnMode
11d3:80 1a        bra :go
11d5:         
11d5:         :indy
11d5:e8           inx             ; skip )
11d6:bd 00 21     lda lineBuf,x
11d9:c9 2c        cmp #',
11db:d0 12        bne :go         ; presume (ind)
11dd:e8           inx
11de:bd 00 21     lda lineBuf,x
11e1:20 3c 0b     jsr ePet
11e4:29 7f        and #$7f
11e6:c9 59        cmp #'y
11e8:d0 9c        bne :modeError
11ea:e8           inx
11eb:         
11eb:a9 0f        lda #modeZeroIndY
11ed:85 34        sta isnMode     ; (ind),y
11ef:             ; fall thru
11ef:         
11ef:             ; resolved address mode
11ef:         :go
11ef:20 d3 12     jsr lineAssertEnd
11f2:a5 2c        lda isnBit      ; check for bitn
11f4:f0 13        beq :notbit
11f6:38           sec
11f7:e9 30        sbc #'0
11f9:0a           asl
11fa:0a           asl
11fb:0a           asl
11fc:0a           asl
11fd:85 2c        sta isnBit
11ff:a5 34        lda isnMode
1201:c9 00        cmp #modeAbs
1203:d0 04        bne :notbit
1205:a9 05        lda #modeBitZero
1207:85 34        sta isnMode
1209:         
1209:         :notbit
1209:a5 33        lda isnOp
120b:c9 54        cmp #$54        ; BRK is special
120d:f0 49        beq :brk
120f:         
120f:20 b8 18     jsr opResolve   ; opcode in a
1212:b0 4f        bcs :modeErrorb
1214:         
1214:65 2c        adc isnBit      ; if bitn, adjust
1216:20 2a 11     jsr lineEmit    ; opcode
1219:         
1219:a5 34        lda isnMode
121b:c9 08        cmp #modeRel
121d:f0 0a        beq :rel
121f:c9 09        cmp #modeBitRel
1221:d0 43        bne :notrel
1223:         
1223:ad 7b 1d     lda argZ
1226:20 2a 11     jsr lineEmit    ; zp arg of bitRel
1229:         
1229:         :rel
1229:a5 40        lda pass
122b:f0 28        beq :pass0      ; no check in first pass    
122d:         
122d:ad 7d 1d     lda pc          ; relative
1230:18           clc
1231:69 01        adc #1          ; scratch=pc+1
1233:85 22        sta scratch
1235:ad 7e 1d     lda pc+1
1238:69 00        adc #0
123a:85 23        sta scratch+1
123c:         
123c:a5 35        lda arg         ; arg-=scratch
123e:38           sec
123f:e5 22        sbc scratch
1241:85 35        sta arg
1243:a5 36        lda arg+1
1245:e5 23        sbc scratch+1
1247:85 36        sta arg+1
1249:         
1249:a2 ff        ldx #$ff
124b:a5 35        lda arg         ; test for valid range
124d:30 02        bmi :checkBack
124f:a2 00        ldx #$00
1251:         :checkBack
1251:e4 36        cpx arg+1
1253:d0 25        bne :relError
1255:         
1255:         :pass0
1255:4c 2a 11     jmp lineEmit    ; send it
1258:         
1258:         :brk
1258:a5 34        lda isnMode
125a:c9 07        cmp #modeImp
125c:d0 05        bne :modeErrorb
125e:a9 00        lda #0
1260:4c 2a 11     jmp lineEmit    ; emit the single $00
1263:         
1263:         :modeErrorb
1263:4c 86 11     jmp :modeError
1266:         
1266:         :notrel
1266:c9 07        cmp #modeImp
1268:f0 14        beq :done
126a:         
126a:a5 35        lda arg         ; low byte or zp
126c:20 2a 11     jsr lineEmit
126f:         
126f:a5 34        lda isnMode
1271:c9 05        cmp #5
1273:b0 09        bcs :done
1275:         
1275:a5 36        lda arg+1       ; high byte
1277:4c 2a 11     jmp lineEmit
127a:         
127a:         :relError
127a:a9 12        lda #errors:rel
127c:85 46        sta error
127e:         :done
127e:60           rts
127f:         
127f:         ;
127f:         ; expect 'quoted string' and return in a/x/y
127f:         lineGetName:
127f:20 df 12     jsr lineAssertToken
1282:e8           inx
1283:c9 27        cmp #''
1285:d0 17        bne lineErrorDotArg
1287:86 22        stx scratch
1289:a0 00        ldy #0
128b:         :count
128b:20 cb 12     jsr lineEndExit
128e:c9 27        cmp #''
1290:f0 04        beq :got
1292:c8           iny
1293:e8           inx
1294:d0 f5        bne :count
1296:         :got
1296:98           tya             ; length -> A
1297:a6 22        ldx scratch
1299:a0 21        ldy #>lineBuf
129b:4c a7 13     jmp ioCopySourceName
129e:         
129e:         lineErrorDotArg:
129e:a9 1a        lda #errors:dotArg
12a0:85 46        sta error
12a2:80 22        bra lineExit
12a4:         
12a4:         ;
12a4:         ; Z=1 if at end
12a4:         lineEnd:
12a4:bd 00 21     lda lineBuf,x
12a7:f0 02        beq :out        ; eof
12a9:c9 3b        cmp #';
12ab:         :out
12ab:60           rts
12ac:         
12ac:         ;
12ac:         ; Z=1 if at end (; or eof)
12ac:         lineNextToken:
12ac:20 a4 12     jsr lineEnd
12af:f0 0c        beq :out
12b1:c9 21        cmp #33
12b3:90 09        bcc :white
12b5:c9 a0        cmp #160
12b7:f0 05        beq :white
12b9:c9 e0        cmp #224
12bb:f0 01        beq :white
12bd:         :out
12bd:60           rts
12be:         :white
12be:e8           inx
12bf:80 eb        bra lineNextToken
12c1:         
12c1:         ;
12c1:         ; lineNextToken with a fast exit at end
12c1:         lineNextTokenExit:
12c1:20 ac 12     jsr lineNextToken
12c4:d0 04        bne lineExit:out
12c6:         lineExit:
12c6:ae 7a 1d     ldx lineSP      ; rewind stack for fast exit
12c9:9a           txs
12ca:         :out
12ca:60           rts
12cb:         
12cb:         ;
12cb:         ; lineEnd with fast exit
12cb:         lineEndExit:
12cb:20 a4 12     jsr lineEnd
12ce:d0 02        bne :out
12d0:80 f4        bra lineExit
12d2:         :out
12d2:60           rts
12d3:         
12d3:         ;
12d3:         ; lineNextToken with an error and fast exit if not at end
12d3:         lineAssertEnd:
12d3:20 ac 12     jsr lineNextToken
12d6:f0 06        beq :out
12d8:a9 14        lda #errors:parse
12da:85 46        sta error
12dc:80 e8        bra lineExit
12de:         :out
12de:60           rts
12df:         
12df:         ;
12df:         ; lineNextToken with an error and fast exit if at end
12df:         lineAssertToken:
12df:20 ac 12     jsr lineNextToken
12e2:d0 06        bne :out
12e4:a9 16        lda #errors:noArg
12e6:85 46        sta error
12e8:80 dc        bra lineExit
12ea:         :out
12ea:60           rts
12eb:         
12eb:         ;
12eb:         ; call eEval and fast exit on error
12eb:         lineEval
12eb:20 4f 0b     jsr eEval
12ee:90 06        bcc :out
12f0:a9 08        lda #errors:eval
12f2:85 46        sta error
12f4:80 d0        bra lineExit
12f6:         :out
12f6:60           rts
12f7:         
12f7:             .in 'io.asm'
12f7:             .in 'zp.asm'
12f7:             .fi ; zpAsm
12f7:         
12f7:             .in 'kernal.asm'
12f7:             .fi ; kernalAsm
12f7:         
12f7:         
12f7:         ;
12f7:         ; initialize
12f7:         ioInit:
12f7:20 e7 ff     jsr CLALL
12fa:9c 78 1d     stz ioLFN
12fd:64 49        stz ioNameL
12ff:64 3f        stz ioBufStatus
1301:64 46        stz error
1303:9c 75 1d     stz ioLine
1306:9c 76 1d     stz ioLine+1
1309:64 4a        stz ioOutPtr
130b:9c 77 1d     stz ioFDS
130e:a9 ff        lda #$ff
1310:8d 73 1d     sta ioPtr
1313:a9 08        lda #8          ; default to device 8
1315:8d 74 1d     sta ioDev
1318:a9 2a        lda #<:null
131a:8d 71 1d     sta emit
131d:a9 13        lda #>:null
131f:8d 72 1d     sta emit+1
1322:a2 0f        ldx #$0f        ; initialize io buffers
1324:         :loop
1324:9e 8a 1d     stz ioBufs,x
1327:ca           dex
1328:10 fa        bpl :loop
132a:         :null
132a:18           clc
132b:60           rts
132c:         
132c:         ;
132c:         ; write a byte via the emit vector
132c:         ioEmit:
132c:ee 7d 1d     inc pc
132f:d0 03        bne :lo
1331:ee 7e 1d     inc pc+1
1334:         :lo
1334:6c 71 1d     jmp (emit)
1337:         
1337:         ;
1337:         ; close all files and display error
1337:         ioError:
1337:20 8a 16     jsr ioCloseAll
133a:a9 0d        lda #13         ; cr
133c:20 d2 ff     jsr CHROUT
133f:a0 00        ldy #0
1341:         :print
1341:c4 49        cpy ioNameL
1343:f0 08        beq :printed
1345:b1 47        lda (ioName),y  ; print "filename:"
1347:20 d2 ff     jsr CHROUT
134a:c8           iny
134b:d0 f4        bne :print
134d:         :printed
134d:a9 3a        lda #':
134f:20 d2 ff     jsr CHROUT
1352:ad 76 1d     lda ioLine+1
1355:20 18 17     jsr ioPrintHex
1358:ad 75 1d     lda ioLine
135b:20 18 17     jsr ioPrintHex
135e:a9 20        lda #32
1360:20 d2 ff     jsr CHROUT
1363:20 59 17     jsr errPrint
1366:a9 0d        lda #13         ; cr
1368:4c d2 ff     jmp CHROUT
136b:         
136b:         appendPtr:
136b:91 27        sta (ptr),y
136d:c8           iny
136e:60           rts
136f:         
136f:         comma:
136f:a9 2c        lda #',
1371:80 f8        bra appendPtr
1373:         
1373:         commaS:
1373:20 6f 13     jsr comma
1376:a9 53        lda #'s
1378:80 f1        bra appendPtr
137a:         
137a:         commaP:
137a:20 6f 13     jsr comma
137d:a9 50        lda #'p
137f:80 ea        bra appendPtr
1381:         
1381:         commaR:
1381:20 6f 13     jsr comma
1384:a9 52        lda #'r
1386:80 e3        bra appendPtr
1388:         
1388:         commaW:
1388:20 6f 13     jsr comma
138b:a9 57        lda #'w
138d:80 dc        bra appendPtr
138f:         
138f:         ;
138f:         ; make a copy of a/x/y with ,p,w appended
138f:         ; result in a/x/y
138f:         ioCopyDestName:
138f:20 b5 13     jsr ioCopyName
1392:20 7a 13     jsr commaP
1395:20 88 13     jsr commaW
1398:         copyOut:
1398:98           tya
1399:a4 28        ldy ptr+1
139b:60           rts
139c:         
139c:         ;
139c:         ; make a copy of a/x/y with ,s,w appended
139c:         ioCopyListName:
139c:20 b5 13     jsr ioCopyName
139f:20 73 13     jsr commaS
13a2:20 88 13     jsr commaW
13a5:80 f1        bra copyOut
13a7:         
13a7:         ;
13a7:         ; make a copy of a/x/y with ,s,r appended
13a7:         ; result in a/(ptr)
13a7:         ioCopySourceName:
13a7:20 d2 13     jsr ioStringOut
13aa:20 b5 13     jsr ioCopyName
13ad:20 73 13     jsr commaS
13b0:20 81 13     jsr commaR
13b3:80 e3        bra copyOut
13b5:         
13b5:         ioCopyName:
13b5:86 23        stx string
13b7:84 24        sty string+1
13b9:a8           tay
13ba:18           clc
13bb:69 04        adc #4
13bd:20 f3 0a     jsr symPush
13c0:84 22        sty scratch
13c2:a0 00        ldy #0
13c4:         :loop
13c4:c4 22        cpy scratch
13c6:f0 07        beq :done
13c8:b1 23        lda (string),y
13ca:91 27        sta (ptr),y
13cc:c8           iny
13cd:d0 f5        bne :loop
13cf:         :done
13cf:a6 27        ldx ptr
13d1:60           rts
13d2:         
13d2:         ;
13d2:         ; print string a/x/y with CR
13d2:         ; all preserved
13d2:         ioStringOut:
13d2:85 22        sta scratch
13d4:86 23        stx string
13d6:84 24        sty string+1
13d8:a0 00        ldy #0
13da:         :loop
13da:c4 22        cpy scratch
13dc:f0 08        beq :done
13de:b1 23        lda (string),y
13e0:20 d2 ff     jsr CHROUT
13e3:c8           iny
13e4:d0 f4        bne :loop
13e6:         :done
13e6:a9 0d        lda #13
13e8:20 d2 ff     jsr CHROUT
13eb:a5 22        lda scratch
13ed:a6 23        ldx string
13ef:a4 24        ldy string+1
13f1:60           rts
13f2:         
13f2:         ;
13f2:         ; open output file named in a/x/y with LFN 2
13f2:         ioOpenDest:
13f2:20 bd ff     jsr SETNAM
13f5:a9 02        lda #2
13f7:ae 74 1d     ldx ioDev
13fa:a0 02        ldy #2
13fc:20 ba ff     jsr SETLFS
13ff:20 c0 ff     jsr OPEN
1402:90 04        bcc :opened
1404:a9 1c        lda #errors:io
1406:85 46        sta error
1408:         :opened
1408:60           rts
1409:         
1409:         ;
1409:         ; push input file a/x/y
1409:         ioPush:
1409:85 22        sta scratch
140b:86 27        stx ptr
140d:84 28        sty ptr+1
140f:20 cc ff     jsr CLRCHN
1412:         
1412:ac 73 1d     ldy ioPtr       ; push current state
1415:         
1415:ad 78 1d     lda ioLFN       ; push current LFN (zero is done)
1418:99 00 1f     sta ioStack,y
141b:88           dey
141c:         
141c:ad 74 1d     lda ioDev       ; device
141f:99 00 1f     sta ioStack,y
1422:88           dey
1423:         
1423:a5 3f        lda ioBufStatus ; buffer status
1425:99 00 1f     sta ioStack,y
1428:88           dey
1429:         
1429:a5 4b        lda ioInPtr     ; buffer position
142b:99 00 1f     sta ioStack,y
142e:88           dey
142f:         
142f:a5 4d        lda ioIn+1      ; buffer
1431:99 00 1f     sta ioStack,y
1434:88           dey
1435:         
1435:a5 4c        lda ioIn
1437:99 00 1f     sta ioStack,y
143a:88           dey
143b:         
143b:a5 4e        lda ioBufLen    ; buffer length
143d:99 00 1f     sta ioStack,y
1440:88           dey
1441:         
1441:a5 48        lda ioName+1    ; filename
1443:99 00 1f     sta ioStack,y
1446:88           dey
1447:a5 47        lda ioName
1449:99 00 1f     sta ioStack,y
144c:88           dey
144d:         
144d:a5 49        lda ioNameL     ; filename length
144f:99 00 1f     sta ioStack,y
1452:88           dey
1453:         
1453:ad 76 1d     lda ioLine+1    ; line
1456:99 00 1f     sta ioStack,y
1459:88           dey
145a:ad 75 1d     lda ioLine
145d:99 00 1f     sta ioStack,y
1460:88           dey
1461:         
1461:8c 73 1d     sty ioPtr       ; current state all pushed
1464:         
1464:             ; TODO: parse for @device:
1464:         
1464:a5 22        lda scratch     ; scratch/ptr -> nameL/name
1466:85 49        sta ioNameL
1468:a6 27        ldx ptr
146a:86 47        stx ioName
146c:a4 28        ldy ptr+1
146e:84 48        sty ioName+1
1470:20 bd ff     jsr SETNAM      ; filename
1473:         
1473:20 13 15     jsr ioAlloc     ; device secondary in Y
1476:b0 2c        bcs :toomany
1478:c8           iny
1479:c8           iny
147a:c8           iny             ; ..and add 3 to it (we use 2 for the output)
147b:ae 74 1d     ldx ioDev
147e:98           tya             ; use LFN=device secondary
147f:8d 78 1d     sta ioLFN
1482:20 ba ff     jsr SETLFS
1485:         
1485:20 c0 ff     jsr OPEN        ; open the file
1488:b0 15        bcs :error
148a:ae 78 1d     ldx ioLFN
148d:20 c6 ff     jsr CHKIN
1490:b0 0d        bcs :error      ; now current file for reading
1492:9c 75 1d     stz ioLine
1495:9c 76 1d     stz ioLine+1
1498:         
1498:64 4b        stz ioInPtr
149a:64 4e        stz ioBufLen
149c:         
149c:4c 8f 15     jmp ioReadStatus
149f:         
149f:         :error
149f:a9 1c        lda #errors:io
14a1:85 46        sta error
14a3:60           rts
14a4:         
14a4:         :toomany
14a4:a9 1e        lda #errors:tooMany
14a6:85 46        sta error
14a8:60           rts
14a9:         
14a9:         ;
14a9:         ; pop current file state
14a9:         ioPop:
14a9:20 cc ff     jsr CLRCHN      ; disconnect existing
14ac:ad 78 1d     lda ioLFN
14af:20 c3 ff     jsr CLOSE       ; close current logical file
14b2:ac 78 1d     ldy ioLFN
14b5:88           dey
14b6:88           dey
14b7:88           dey
14b8:20 45 15     jsr ioDealloc   ; deallocate device secondary
14bb:         
14bb:ac 73 1d     ldy ioPtr
14be:         
14be:c8           iny             ; line number
14bf:b9 00 1f     lda ioStack,y
14c2:8d 75 1d     sta ioLine
14c5:c8           iny
14c6:b9 00 1f     lda ioStack,y
14c9:8d 76 1d     sta ioLine+1
14cc:         
14cc:c8           iny             ; filename length
14cd:b9 00 1f     lda ioStack,y
14d0:85 49        sta ioNameL
14d2:         
14d2:c8           iny             ; filename
14d3:b9 00 1f     lda ioStack,y
14d6:85 47        sta ioName
14d8:c8           iny
14d9:b9 00 1f     lda ioStack,y
14dc:85 48        sta ioName+1
14de:         
14de:c8           iny             ; buffer length
14df:b9 00 1f     lda ioStack,y
14e2:85 4e        sta ioBufLen
14e4:         
14e4:c8           iny             ; buffer
14e5:b9 00 1f     lda ioStack,y
14e8:85 4c        sta ioIn
14ea:c8           iny
14eb:b9 00 1f     lda ioStack,y
14ee:85 4d        sta ioIn+1
14f0:         
14f0:c8           iny             ; buffer position
14f1:b9 00 1f     lda ioStack,y
14f4:85 4b        sta ioInPtr
14f6:         
14f6:c8           iny             ; buffer status
14f7:b9 00 1f     lda ioStack,y
14fa:85 3f        sta ioBufStatus
14fc:         
14fc:c8           iny
14fd:b9 00 1f     lda ioStack,y   ; device
1500:8d 74 1d     sta ioDev
1503:         
1503:c8           iny             ; LFN
1504:be 00 1f     ldx ioStack,y
1507:8e 78 1d     stx ioLFN
150a:             
150a:8c 73 1d     sty ioPtr
150d:         
150d:f0 03        beq :zero       ; do not redirect from 0
150f:4c c6 ff     jmp CHKIN       ; this also becomes our current input
1512:         :zero
1512:60           rts
1513:         
1513:         ;
1513:         ; allocate device secondary
1513:         ; result in Y
1513:         ioAlloc:
1513:a9 01        lda #$01
1515:a0 00        ldy #0
1517:18           clc
1518:         :scan
1518:2c 77 1d     bit ioFDS
151b:f0 05        beq :done
151d:c8           iny
151e:0a           asl
151f:90 f7        bcc :scan
1521:60           rts
1522:         :done
1522:0c 77 1d     tsb ioFDS
1525:98           tya             ; potentially allocate input buffer
1526:0a           asl
1527:aa           tax
1528:bd 8b 1d     lda ioBufs+1,x
152b:d0 0f        bne :alloced
152d:         
152d:a9 80        lda #$80        ; allocate a buffer
152f:20 f3 0a     jsr symPush
1532:a5 27        lda ptr
1534:9d 8a 1d     sta ioBufs,x
1537:a5 28        lda ptr+1
1539:9d 8b 1d     sta ioBufs+1,x
153c:         
153c:         :alloced            ; allocated
153c:85 4d        sta ioIn+1
153e:bd 8a 1d     lda ioBufs,x
1541:85 4c        sta ioIn
1543:18           clc
1544:60           rts
1545:         
1545:         ;
1545:         ; deallocate device secondary in Y
1545:         ioDealloc:
1545:a9 01        lda #$01
1547:         :shift
1547:c0 00        cpy #0
1549:f0 04        beq :done
154b:0a           asl
154c:88           dey
154d:d0 f8        bne :shift
154f:         :done
154f:1c 77 1d     trb ioFDS
1552:60           rts
1553:         
1553:         ;
1553:         ; read a line of input from current file
1553:         ; if ioLFN is 0 on return, at end of all files and nothing read
1553:         ioReadLine:
1553:f8           sed             ; increment bcd line number
1554:18           clc
1555:ad 75 1d     lda ioLine
1558:69 01        adc #$01
155a:8d 75 1d     sta ioLine
155d:ad 76 1d     lda ioLine+1
1560:69 00        adc #0
1562:8d 76 1d     sta ioLine+1
1565:d8           cld
1566:         
1566:64 22        stz scratch
1568:         :loop
1568:20 9f 15     jsr ioRead      ; read from input buffer until CR or EOF
156b:a6 22        ldx scratch
156d:b0 0b        bcs :readerr
156f:e6 22        inc scratch
1571:c9 0d        cmp #13         ; CR?
1573:f0 16        beq :linedone
1575:9d 00 21     sta lineBuf,x
1578:80 ee        bra :loop
157a:         :readerr
157a:a5 22        lda scratch     ; if we read something, deal with it
157c:d0 0d        bne :linedone
157e:         
157e:a5 46        lda error       ; non eof error?
1580:d0 08        bne :done
1582:         
1582:20 a9 14     jsr ioPop       ; eof; pop this input
1585:ad 78 1d     lda ioLFN
1588:d0 c9        bne ioReadLine  ; continue previous input
158a:         :done
158a:60           rts
158b:         
158b:         :linedone
158b:9e 00 21     stz lineBuf,x   ; mark end of line
158e:60           rts
158f:         
158f:         ;
158f:         ; call READST, set error if not EOF
158f:         ; Z=1 if all clear
158f:         ioReadStatus:
158f:20 b7 ff     jsr READST
1592:85 3f        sta ioBufStatus
1594:89 bf        bit #$bf        ; everything except eof
1596:f0 04        beq :done
1598:a9 1c        lda #errors:io
159a:85 46        sta error
159c:         :done
159c:89 ff        bit #$ff        ; leave Z=0 if EOF
159e:60           rts
159f:         
159f:         ;
159f:         ; read byte from input buffer, refilling if needed
159f:         ioRead:
159f:a4 4b        ldy ioInPtr
15a1:c4 4e        cpy ioBufLen
15a3:f0 06        beq :refill
15a5:e6 4b        inc ioInPtr
15a7:b1 4c        lda (ioIn),y
15a9:18           clc
15aa:60           rts
15ab:         :refill
15ab:64 4b        stz ioInPtr     ; reset input
15ad:64 4e        stz ioBufLen
15af:a5 3f        lda ioBufStatus ; check for end of file
15b1:d0 33        bne :end
15b3:a9 80        lda #$80        ; read max 128 bytes into buffer
15b5:a6 4c        ldx ioIn
15b7:a4 4d        ldy ioIn+1
15b9:18           clc
15ba:20 44 ff     jsr MACPTR
15bd:b0 0b        bcs :bytes      ; unsupported or error
15bf:e0 00        cpx #0
15c1:f0 25        beq :eof        ; end of file
15c3:86 4e        stx ioBufLen
15c5:20 8f 15     jsr ioReadStatus
15c8:80 d5        bra ioRead
15ca:         :bytes
15ca:20 8f 15     jsr ioReadStatus
15cd:d0 17        bne :end
15cf:a0 00        ldy #0
15d1:         :loop
15d1:20 cf ff     jsr CHRIN
15d4:91 4c        sta (ioIn),y
15d6:20 8f 15     jsr ioReadStatus
15d9:d0 07        bne :bytesdone  ; error or eof
15db:c8           iny
15dc:10 f3        bpl :loop       ; read max 128 bytes
15de:         :partial
15de:84 4e        sty ioBufLen
15e0:80 bd        bra ioRead
15e2:         :bytesdone
15e2:c0 00        cpy #0
15e4:d0 f8        bne :partial    ; if we made progress, use partial read
15e6:         :end
15e6:38           sec
15e7:60           rts
15e8:         :eof
15e8:a9 40        lda #$40
15ea:85 3f        sta ioBufStatus
15ec:80 f8        bra :end
15ee:         
15ee:         ;
15ee:         ; copy
15ee:         ioCopy:
15ee:a5 46        lda error
15f0:d0 0a        bne :done
15f2:20 9f 15     jsr ioRead
15f5:b0 05        bcs :done
15f7:20 2c 13     jsr ioEmit
15fa:90 f2        bcc ioCopy
15fc:         :done
15fc:a5 46        lda error
15fe:f0 03        beq :out
1600:4c a9 14     jmp ioPop
1603:         :out
1603:60           rts
1604:         
1604:         ;
1604:         ; emit byte to output (binary or listing char)
1604:         ioEmitBin:
1604:86 2a        stx emitX
1606:84 2b        sty emitY
1608:a4 4a        ldy ioOutPtr
160a:99 00 1e     sta ioBuf,y
160d:c8           iny
160e:84 4a        sty ioOutPtr
1610:18           clc             ; no error
1611:d0 03        bne :out
1613:20 3e 16     jsr ioFlushAlways
1616:         :out
1616:a6 2a        ldx emitX
1618:a4 2b        ldy emitY
161a:60           rts
161b:         
161b:         ;
161b:         ; emit listing output
161b:         ioEmitListing:
161b:20 30 17     jsr ioHex
161e:a9 20        lda #32
1620:20 04 16     jsr ioEmitBin
1623:b0 14        bcs :out
1625:ee 7c 1d     inc ioColumn
1628:ad 7c 1d     lda ioColumn
162b:c9 08        cmp #8
162d:90 0a        bcc :out
162f:a9 0d        lda #13
1631:20 04 16     jsr ioEmitBin
1634:b0 03        bcs :out
1636:20 ce 16     jsr ioListing
1639:         :out
1639:60           rts
163a:         
163a:         
163a:         ;
163a:         ; flush any unwritten output
163a:         ioFlush:
163a:a5 4a        lda ioOutPtr
163c:f0 42        beq ioSuccess
163e:         ioFlushAlways:
163e:20 cc ff     jsr CLRCHN
1641:a2 02        ldx #2
1643:20 c9 ff     jsr CHKOUT
1646:b0 1e        bcs :done
1648:         
1648:a5 4a        lda ioOutPtr    ; try to write entire buffer
164a:a2 00        ldx #<ioBuf     ; invariant: 0; this is page aligned
164c:a0 1e        ldy #>ioBuf
164e:20 b1 fe     jsr MCIOUT
1651:b0 06        bcs :slow       ; not supported
1653:         
1653:e4 4a        cpx ioOutPtr    ; did we write everything?
1655:f0 0f        beq :done
1657:80 02        bra :loop       ; byte bang the rest
1659:         
1659:         :slow
1659:a2 00        ldx #0          ; byte bang
165b:         :loop
165b:bd 00 1e     lda ioBuf,x
165e:20 d2 ff     jsr CHROUT
1661:e8           inx
1662:e4 4a        cpx ioOutPtr
1664:d0 f5        bne :loop
1666:         :done
1666:64 4a        stz ioOutPtr
1668:20 cc ff     jsr CLRCHN
166b:ae 78 1d     ldx ioLFN
166e:f0 03        beq :noread
1670:20 c6 ff     jsr CHKIN
1673:         :noread
1673:20 b7 ff     jsr READST
1676:c9 00        cmp #0
1678:f0 06        beq ioSuccess
167a:a9 1c        lda #errors:io
167c:85 46        sta error
167e:38           sec
167f:60           rts
1680:         ioSuccess:
1680:18           clc
1681:60           rts
1682:         
1682:         ;
1682:         ; flush output buffer and close
1682:         ioClose:
1682:20 3a 16     jsr ioFlush
1685:a9 02        lda #2
1687:4c c3 ff     jmp CLOSE
168a:         
168a:         ;
168a:         ; close all disk before exiting abnormally
168a:         ioCloseAll:
168a:             ; preserve filename and line number for error
168a:ad 75 1d     lda ioLine
168d:8d 00 21     sta lineBuf
1690:ad 76 1d     lda ioLine+1
1693:8d 01 21     sta lineBuf+1
1696:a5 49        lda ioNameL
1698:8d 02 21     sta lineBuf+2
169b:a5 47        lda ioName
169d:8d 03 21     sta lineBuf+3
16a0:a5 48        lda ioName+1
16a2:8d 04 21     sta lineBuf+4
16a5:         
16a5:20 82 16     jsr ioClose
16a8:         :loop
16a8:ad 78 1d     lda ioLFN
16ab:f0 05        beq :done
16ad:20 a9 14     jsr ioPop
16b0:80 f6        bra :loop
16b2:         :done
16b2:ad 00 21     lda lineBuf
16b5:8d 75 1d     sta ioLine
16b8:ad 01 21     lda lineBuf+1
16bb:8d 76 1d     sta ioLine+1
16be:ad 02 21     lda lineBuf+2
16c1:85 49        sta ioNameL
16c3:ad 03 21     lda lineBuf+3
16c6:85 47        sta ioName
16c8:ad 04 21     lda lineBuf+4
16cb:85 48        sta ioName+1
16cd:         
16cd:60           rts
16ce:         
16ce:         ;
16ce:         ; emit listing address, reset column count
16ce:         ioListing:
16ce:a5 40        lda pass
16d0:10 18        bpl :silent     ; $80 must be set in pass for this output
16d2:a5 44        lda lineIfs
16d4:30 14        bmi :silent     ; do not list if'd out
16d6:ad 7e 1d     lda pc+1        ; PC:
16d9:20 30 17     jsr ioHex
16dc:ad 7d 1d     lda pc
16df:20 30 17     jsr ioHex
16e2:a9 3a        lda #':
16e4:20 04 16     jsr ioEmitBin
16e7:9c 7c 1d     stz ioColumn
16ea:         :silent
16ea:60           rts
16eb:         
16eb:         ;
16eb:         ; pad trailing spaced per ioColumn
16eb:         ioPadListing:
16eb:a9 03        lda #3
16ed:38           sec
16ee:ed 7c 1d     sbc ioColumn
16f1:90 0c        bcc :nextLine
16f3:aa           tax
16f4:18           clc
16f5:         :loop
16f5:ca           dex
16f6:30 1f        bmi :done
16f8:a0 03        ldy #3
16fa:20 0d 17     jsr :spaces
16fd:80 f6        bra :loop
16ff:         :nextLine
16ff:a9 0d        lda #13         ; cr
1701:20 04 16     jsr ioEmitBin
1704:b0 11        bcs :done
1706:a0 0d        ldy #13         ; xxxx:aa bb cc
1708:20 0d 17     jsr :spaces
170b:80 e8        bra :loop
170d:         :spaces
170d:a9 20        lda #32         ; space
170f:20 04 16     jsr ioEmitBin
1712:b0 03        bcs :done
1714:88           dey
1715:d0 f6        bne :spaces
1717:         :done
1717:60           rts
1718:         
1718:         ;
1718:         ; print hex byte in A
1718:         ioPrintHex:
1718:85 22        sta scratch
171a:4a           lsr
171b:4a           lsr
171c:4a           lsr
171d:4a           lsr
171e:20 25 17     jsr :digit
1721:a5 22        lda scratch
1723:29 0f        and #$0f
1725:         :digit
1725:c9 0a        cmp #10
1727:90 02        bcc :num
1729:69 06        adc #6          ; add 7 (C=1)
172b:         :num
172b:69 30        adc #'0
172d:4c d2 ff     jmp CHROUT
1730:         
1730:         ;
1730:         ; emit hex byte in A
1730:         ioHex:
1730:85 22        sta scratch
1732:4a           lsr
1733:4a           lsr
1734:4a           lsr
1735:4a           lsr
1736:20 3d 17     jsr :digit
1739:a5 22        lda scratch
173b:29 0f        and #$0f
173d:         :digit
173d:c9 0a        cmp #10
173f:90 02        bcc :num
1741:69 06        adc #6
1743:         :num
1743:69 30        adc #'0
1745:4c 04 16     jmp ioEmitBin
1748:         
1748:         ;
1748:         ; print 0 terminated string in X/Y
1748:         ; uses ptr
1748:         ioPrint:
1748:86 27        stx ptr
174a:84 28        sty ptr+1
174c:a0 00        ldy #0
174e:         :loop
174e:b1 27        lda (ptr),y
1750:f0 06        beq :done
1752:20 d2 ff     jsr CHROUT
1755:c8           iny
1756:d0 f6        bne :loop
1758:         :done
1758:60           rts
1759:         
1759:         
1759:             .in 'error.asm'
1759:             .in 'zp.asm'
1759:             .fi ; zpAsm
1759:         
1759:             .in 'kernal.asm'
1759:             .fi ; kernalAsm
1759:         
1759:         
1759:         ;
1759:         ; print errror message
1759:         errPrint:
1759:a6 46        ldx error
175b:bd 65 17     lda :table,x
175e:bc 66 17     ldy :table+1,x
1761:aa           tax
1762:4c 48 17     jmp ioPrint
1765:         :table
1765:         errors:
1765:         :fine   =*-errors
1765:85 17        .dw :strings:fine
1767:         :dupLabel=*-errors
1767:8a 17        .dw :strings:dupLabel
1769:         :star   =*-errors
1769:94 17        .dw :strings:star
176b:         :backward=*-errors
176b:9e 17        .dw :strings:backward
176d:         :eval   =*-errors
176d:ac 17        .dw :strings:eval
176f:         :assign =*-errors
176f:bb 17        .dw :strings:assign
1771:         :dotOp  =*-errors
1771:c9 17        .dw :strings:dotOp
1773:         :op =*-errors
1773:db 17        .dw :strings:op
1775:         :mode   =*-errors
1775:e6 17        .dw :strings:mode
1777:         :rel    =*-errors
1777:f7 17        .dw :strings:rel
1779:         :parse  =*-errors
1779:0b 18        .dw :strings:parse
177b:         :noArg  =*-errors
177b:18 18        .dw :strings:noArg
177d:         :emit   =*-errors
177d:25 18        .dw :strings:emit
177f:         :dotArg =*-errors
177f:34 18        .dw :strings:dotArg
1781:         :io =*-errors
1781:46 18        .dw :strings:io
1783:         :tooMany=*-errors
1783:4f 18        .dw :strings:tooMany
1785:         
1785:         errors:strings:
1785:         :fine
1785:46 49 4e 45 00 
                 .db 'fine',0
178a:         :dupLabel
178a:44 55 50 20 4c 41 42 45 
1792:4c 00        .db 'dup label',0
1794:         :star
1794:53 54 41 52 20 45 58 50 
179c:52 00        .db 'star expr',0
179e:         :backward
179e:50 43 20 4d 4f 56 45 44 
17a6:20 42 41 43 4b 00 
                 .db 'pc moved back',0
17ac:         :eval
17ac:42 41 44 20 45 58 50 52 
17b4:45 53 53 49 4f 4e 00 
                 .db 'bad expression',0
17bb:         :assign
17bb:42 41 44 20 41 53 53 49 
17c3:47 4d 45 4e 54 00 
                 .db 'bad assigment',0
17c9:         :dotOp
17c9:55 4e 4b 4e 4f 57 4e 20 
17d1:50 53 45 55 44 4f 20 4f 
17d9:50 00        .db 'unknown pseudo op',0
17db:         :op
17db:55 4e 4b 4e 4f 57 4e 20 
17e3:4f 50 00     .db 'unknown op',0
17e6:         :mode
17e6:42 41 44 20 41 44 44 52 
17ee:45 53 53 20 4d 4f 44 45 
17f6:00           .db 'bad address mode',0
17f7:         :rel
17f7:42 52 41 4e 43 48 20 4f 
17ff:55 54 20 4f 46 20 52 41 
1807:4e 47 45 00 
                 .db 'branch out of range',0
180b:         :parse
180b:53 59 4e 54 41 58 20 45 
1813:52 52 4f 52 00 
                 .db 'syntax error',0
1818:         :noArg
1818:41 52 47 20 45 58 50 45 
1820:43 54 45 44 00 
                 .db 'arg expected',0
1825:         :emit
1825:49 4f 20 57 52 49 54 45 
182d:20 45 52 52 4f 52 00 
                 .db 'io write error',0
1834:         :dotArg
1834:42 41 44 20 50 53 45 55 
183c:44 4f 20 4f 50 20 41 52 
1844:47 00        .db 'bad pseudo op arg',0
1846:         :io
1846:49 4f 20 45 52 52 4f 52 
184e:00           .db 'io error',0
184f:         :tooMany
184f:54 4f 4f 20 4d 41 4e 59 
1857:20 4f 50 45 4e 20 46 49 
185f:4c 45 53 00 
                 .db 'too many open files',0
1863:         
1863:             .in 'isns.asm'
1863:             .in 'zp.asm'
1863:             .fi ; zpAsm
1863:         
1863:             .in 'mode.asm'
1863:             .fi ; modeAsm
1863:         
1863:         
1863:         
1863:         ;
1863:         ; return isn token at lineBuf,x
1863:         ; isnOp: result
1863:         ; C: not found
1863:         isnGet:
1863:             ; A,B,C = a-'A', b-'A', c-'A'
1863:             ; 
1863:             ; bit fedcba9876543210
1863:             ;     0AAAAABBBBBCCCCC
1863:             ; ex "LDA" is $2c60
1863:             ;
1863:bd 00 21     lda lineBuf,x
1866:38           sec
1867:e9 41        sbc #'a
1869:0a           asl
186a:0a           asl
186b:85 23        sta isn2
186d:bd 01 21     lda lineBuf+1,x
1870:38           sec
1871:e9 41        sbc #'a
1873:85 22        sta isn1
1875:4a           lsr
1876:4a           lsr
1877:4a           lsr
1878:04 23        tsb isn2
187a:a5 22        lda isn1
187c:0a           asl
187d:0a           asl
187e:0a           asl
187f:0a           asl
1880:0a           asl
1881:85 22        sta isn1
1883:bd 02 21     lda lineBuf+2,x
1886:38           sec
1887:e9 41        sbc #'a
1889:04 22        tsb isn1
188b:         
188b:             ; incr=1 element (2 bytes per entry)
188b:a0 02        ldy #2
188d:84 24        sty incr
188f:         
188f:         :loop
188f:a5 23        lda isn2        ; hi cmp
1891:d9 fd 18     cmp isns+1,y
1894:d0 07        bne :cmp        ; if =, continue with lo cmp
1896:         
1896:a5 22        lda isn1        ; lo cmp
1898:d9 fc 18     cmp isns,y
189b:f0 11        beq :found      ; if =, found
189d:         
189d:         :cmp
189d:90 05        bcc :lo         ; needle < haystack location?
189f:20 b2 18     jsr :next       ; no: extra advance to do it twice
18a2:b0 09        bcs :not
18a4:         
18a4:         :lo
18a4:20 b2 18     jsr :next       ; advance
18a7:b0 04        bcs :not
18a9:         
18a9:06 24        asl incr        ; double incr for next advance
18ab:90 e2        bcc :loop
18ad:         :not
18ad:60           rts             ; invariant: C=1
18ae:         
18ae:         :found
18ae:18           clc             ; C=0 to indicate found
18af:84 33        sty isnOp
18b1:60           rts
18b2:         
18b2:         :next
18b2:98           tya             ; y += incr
18b3:18           clc
18b4:65 24        adc incr        ; C=1 if over
18b6:a8           tay
18b7:60           rts
18b8:         
18b8:         ;
18b8:         ; resolve deduced address mode and instruction
18b8:         opResolve:
18b8:a6 33        ldx isnOp
18ba:bd fd 19     lda ops+1,x
18bd:f0 2e        beq :imp
18bf:85 28        sta ptr+1
18c1:bd fc 19     lda ops,x
18c4:85 27        sta ptr
18c6:         
18c6:             ; can we zp this?
18c6:a5 36        lda arg+1       ; no, it is a 16 bit arg
18c8:d0 15        bne :try
18ca:         
18ca:a5 34        lda isnMode     ; does this have a potential zp version?
18cc:c9 05        cmp #5
18ce:b0 0f        bcs :try        ; no
18d0:         
18d0:69 0a        adc #10         ; try the zp form
18d2:85 34        sta isnMode
18d4:20 df 18     jsr :try
18d7:90 20        bcc :out        ; we win (or it was relative)
18d9:         
18d9:a5 34        lda isnMode
18db:e9 0a        sbc #10
18dd:85 34        sta isnMode     ; continue with original absolute
18df:         
18df:         :try
18df:a4 34        ldy isnMode
18e1:b1 27        lda (ptr),y
18e3:d0 11        bne :found      ; found it
18e5:         
18e5:a0 08        ldy #modeRel
18e7:b1 27        lda (ptr),y
18e9:d0 0b        bne :found
18eb:         
18eb:80 0d        bra :err
18ed:             
18ed:         :imp
18ed:a4 34        ldy isnMode     ; has to be modeImp
18ef:c0 07        cpy #modeImp
18f1:d0 07        bne :err
18f3:bd fc 19     lda ops,x
18f6:             ; fall thru
18f6:         
18f6:         :found
18f6:84 34        sty isnMode
18f8:18           clc
18f9:         :out
18f9:60           rts
18fa:         
18fa:         :err
18fa:38           sec
18fb:60           rts
18fc:         
18fc:             .in 'isns-table.asm'
18fc:         *=*%100
18fc:         isns:
18fc:00 00        .dw $0000
18fe:51 2e        .dw $2e51 ; 02 lsr
1900:32 04        .dw $0432 ; 04 bbs
1902:f2 4e        .dw $4ef2 ; 06 txs
1904:00 00        .dw $0000
1906:22 48        .dw $4822 ; 0a sbc
1908:75 09        .dw $0975 ; 0c clv
190a:ff 7f        .dw $7fff
190c:00 00        .dw $0000
190e:6f 3d        .dw $3d6f ; 12 plp
1910:eb 05        .dw $05eb ; 14 bpl
1912:ff 7f        .dw $7fff
1914:00 00        .dw $0000
1916:78 4a        .dw $4a78 ; 1a sty
1918:a2 21        .dw $21a2 ; 1c inc
191a:ff 7f        .dw $7fff
191c:00 00        .dw $0000
191e:ef 3c        .dw $3cef ; 22 php
1920:90 04        .dw $0490 ; 24 beq
1922:ff 7f        .dw $7fff
1924:00 00        .dw $0000
1926:81 49        .dw $4981 ; 2a smb
1928:82 0c        .dw $0c82 ; 2c dec
192a:ff 7f        .dw $7fff
192c:00 00        .dw $0000
192e:cb 45        .dw $45cb ; 32 rol
1930:b2 06        .dw $06b2 ; 34 bvs
1932:ff 7f        .dw $7fff
1934:62 00        .dw $0062 ; 38 adc
1936:21 4e        .dw $4e21 ; 3a trb
1938:51 26        .dw $2651 ; 3c jsr
193a:ff 7f        .dw $7fff
193c:00 00        .dw $0000
193e:20 3a        .dw $3a20 ; 42 ora
1940:42 04        .dw $0442 ; 44 bcc
1942:08 58        .dw $5808 ; 46 wai
1944:00 00        .dw $0000
1946:83 48        .dw $4883 ; 4a sed
1948:f7 09        .dw $09f7 ; 4c cpx
194a:ff 7f        .dw $7fff
194c:00 00        .dw $0000
194e:78 3d        .dw $3d78 ; 52 ply
1950:2a 06        .dw $062a ; 54 brk
1952:ff 7f        .dw $7fff
1954:00 00        .dw $0000
1956:17 4c        .dw $4c17 ; 5a tax
1958:b8 21        .dw $21b8 ; 5c iny
195a:ff 7f        .dw $7fff
195c:00 00        .dw $0000
195e:f8 3c        .dw $3cf8 ; 62 phy
1960:88 05        .dw $0588 ; 64 bmi
1962:ff 7f        .dw $7fff
1964:00 00        .dw $0000
1966:6f 4a        .dw $4a6f ; 6a stp
1968:98 0c        .dw $0c98 ; 6c dey
196a:ff 7f        .dw $7fff
196c:00 00        .dw $0000
196e:68 46        .dw $4668 ; 72 rti
1970:63 09        .dw $0963 ; 74 cld
1972:ff 7f        .dw $7fff
1974:4b 02        .dw $024b ; 78 asl
1976:57 4e        .dw $4e57 ; 7a tsx
1978:77 2c        .dw $2c77 ; 7c ldx
197a:ff 7f        .dw $7fff
197c:00 00        .dw $0000
197e:cf 35        .dw $35cf ; 82 nop
1980:42 04        .dw $0442 ; 84 bcc
1982:00 4f        .dw $4f00 ; 86 tya
1984:00 00        .dw $0000
1986:82 48        .dw $4882 ; 8a sec
1988:8f 09        .dw $098f ; 8c cmp
198a:ff 7f        .dw $7fff
198c:00 00        .dw $0000
198e:77 3d        .dw $3d77 ; 92 plx
1990:20 06        .dw $0620 ; 94 bra
1992:ff 7f        .dw $7fff
1994:00 00        .dw $0000
1996:79 4a        .dw $4a79 ; 9a stz
1998:b7 21        .dw $21b7 ; 9c inx
199a:ff 7f        .dw $7fff
199c:00 00        .dw $0000
199e:f7 3c        .dw $3cf7 ; a2 phx
19a0:13 05        .dw $0513 ; a4 bit
19a2:ff 7f        .dw $7fff
19a4:00 00        .dw $0000
19a6:60 4a        .dw $4a60 ; aa sta
19a8:97 0c        .dw $0c97 ; ac dex
19aa:ff 7f        .dw $7fff
19ac:00 00        .dw $0000
19ae:d1 45        .dw $45d1 ; b2 ror
19b0:62 09        .dw $0962 ; b4 clc
19b2:ff 7f        .dw $7fff
19b4:a3 01        .dw $01a3 ; b8 and
19b6:41 4e        .dw $4e41 ; ba tsb
19b8:60 2c        .dw $2c60 ; bc lda
19ba:ff 7f        .dw $7fff
19bc:00 00        .dw $0000
19be:e0 3c        .dw $3ce0 ; c2 pha
19c0:52 04        .dw $0452 ; c4 bcs
19c2:ff 7f        .dw $7fff
19c4:00 00        .dw $0000
19c6:88 48        .dw $4888 ; ca sei
19c8:f8 09        .dw $09f8 ; cc cpy
19ca:ff 7f        .dw $7fff
19cc:00 00        .dw $0000
19ce:81 45        .dw $4581 ; d2 rmb
19d0:a2 06        .dw $06a2 ; d4 bvc
19d2:ff 7f        .dw $7fff
19d4:00 00        .dw $0000
19d6:18 4c        .dw $4c18 ; da tay
19d8:8f 25        .dw $258f ; dc jmp
19da:ff 7f        .dw $7fff
19dc:00 00        .dw $0000
19de:60 3d        .dw $3d60 ; e2 pla
19e0:a4 05        .dw $05a4 ; e4 bne
19e2:ff 7f        .dw $7fff
19e4:00 00        .dw $0000
19e6:77 4a        .dw $4a77 ; ea stx
19e8:d1 11        .dw $11d1 ; ec eor
19ea:ff 7f        .dw $7fff
19ec:00 00        .dw $0000
19ee:72 46        .dw $4672 ; f2 rts
19f0:68 09        .dw $0968 ; f4 cli
19f2:ff 7f        .dw $7fff
19f4:31 04        .dw $0431 ; f8 bbr
19f6:e0 4e        .dw $4ee0 ; fa txa
19f8:78 2c        .dw $2c78 ; fc ldy
19fa:ff 7f        .dw $7fff
19fc:         
19fc:         ops:
19fc:00 00     .dw 0
19fe:9c 1c     .dw :lsr
1a00:3c 1b     .dw :bbs
1a02:9a 00     .dw $9a ; txs
1a04:00 00     .dw 0
1a06:ec 1c     .dw :sbc
1a08:b8 00     .dw $b8 ; clv
1a0a:00 00     .dw 0
1a0c:00 00     .dw 0
1a0e:28 00     .dw $28 ; plp
1a10:ac 1b     .dw :bpl
1a12:00 00     .dw 0
1a14:00 00     .dw 0
1a16:2c 1d     .dw :sty
1a18:3c 1c     .dw :inc
1a1a:00 00     .dw 0
1a1c:00 00     .dw 0
1a1e:08 00     .dw $08 ; php
1a20:6c 1b     .dw :beq
1a22:00 00     .dw 0
1a24:00 00     .dw 0
1a26:fc 1c     .dw :smb
1a28:1c 1c     .dw :dec
1a2a:00 00     .dw 0
1a2c:00 00     .dw 0
1a2e:cc 1c     .dw :rol
1a30:dc 1b     .dw :bvs
1a32:00 00     .dw 0
1a34:fc 1a     .dw :adc
1a36:4c 1d     .dw :trb
1a38:5c 1c     .dw :jsr
1a3a:00 00     .dw 0
1a3c:00 00     .dw 0
1a3e:ac 1c     .dw :ora
1a40:4c 1b     .dw :bcc
1a42:cb 00     .dw $cb ; wai
1a44:00 00     .dw 0
1a46:f8 00     .dw $f8 ; sed
1a48:fc 1b     .dw :cpx
1a4a:00 00     .dw 0
1a4c:00 00     .dw 0
1a4e:7a 00     .dw $7a ; ply
1a50:00 00     .dw $00 ; brk
1a52:00 00     .dw 0
1a54:00 00     .dw 0
1a56:aa 00     .dw $aa ; tax
1a58:c8 00     .dw $c8 ; iny
1a5a:00 00     .dw 0
1a5c:00 00     .dw 0
1a5e:5a 00     .dw $5a ; phy
1a60:8c 1b     .dw :bmi
1a62:00 00     .dw 0
1a64:00 00     .dw 0
1a66:db 00     .dw $db ; stp
1a68:88 00     .dw $88 ; dey
1a6a:00 00     .dw 0
1a6c:00 00     .dw 0
1a6e:40 00     .dw $40 ; rti
1a70:d8 00     .dw $d8 ; cld
1a72:00 00     .dw 0
1a74:1c 1b     .dw :asl
1a76:ba 00     .dw $ba ; tsx
1a78:7c 1c     .dw :ldx
1a7a:00 00     .dw 0
1a7c:00 00     .dw 0
1a7e:ea 00     .dw $ea ; nop
1a80:4c 1b     .dw :bcc
1a82:98 00     .dw $98 ; tya
1a84:00 00     .dw 0
1a86:38 00     .dw $38 ; sec
1a88:ec 1b     .dw :cmp
1a8a:00 00     .dw 0
1a8c:00 00     .dw 0
1a8e:fa 00     .dw $fa ; plx
1a90:bc 1b     .dw :bra
1a92:00 00     .dw 0
1a94:00 00     .dw 0
1a96:3c 1d     .dw :stz
1a98:e8 00     .dw $e8 ; inx
1a9a:00 00     .dw 0
1a9c:00 00     .dw 0
1a9e:da 00     .dw $da ; phx
1aa0:7c 1b     .dw :bit
1aa2:00 00     .dw 0
1aa4:00 00     .dw 0
1aa6:0c 1d     .dw :sta
1aa8:ca 00     .dw $ca ; dex
1aaa:00 00     .dw 0
1aac:00 00     .dw 0
1aae:dc 1c     .dw :ror
1ab0:18 00     .dw $18 ; clc
1ab2:00 00     .dw 0
1ab4:0c 1b     .dw :and
1ab6:5c 1d     .dw :tsb
1ab8:6c 1c     .dw :lda
1aba:00 00     .dw 0
1abc:00 00     .dw 0
1abe:48 00     .dw $48 ; pha
1ac0:5c 1b     .dw :bcs
1ac2:00 00     .dw 0
1ac4:00 00     .dw 0
1ac6:78 00     .dw $78 ; sei
1ac8:0c 1c     .dw :cpy
1aca:00 00     .dw 0
1acc:00 00     .dw 0
1ace:bc 1c     .dw :rmb
1ad0:cc 1b     .dw :bvc
1ad2:00 00     .dw 0
1ad4:00 00     .dw 0
1ad6:a8 00     .dw $a8 ; tay
1ad8:4c 1c     .dw :jmp
1ada:00 00     .dw 0
1adc:00 00     .dw 0
1ade:68 00     .dw $68 ; pla
1ae0:9c 1b     .dw :bne
1ae2:00 00     .dw 0
1ae4:00 00     .dw 0
1ae6:1c 1d     .dw :stx
1ae8:2c 1c     .dw :eor
1aea:00 00     .dw 0
1aec:00 00     .dw 0
1aee:60 00     .dw $60 ; rts
1af0:58 00     .dw $58 ; cli
1af2:00 00     .dw 0
1af4:2c 1b     .dw :bbr
1af6:8a 00     .dw $8a ; txa
1af8:8c 1c     .dw :ldy
1afa:00 00     .dw 0
1afc:         :adc
1afc:6d 00 7d 79 00 00 69 00 
1b04:00 00 65 61 75 00 72 71 
1b0c:          .db $6d,$00,$7d,$79,$00,$00,$69,$00,$00,$00,$65,$61,$75,$00,$72,$71
1b0c:         :and
1b0c:2d 00 3d 39 00 00 29 00 
1b14:00 00 25 21 35 00 32 31 
1b1c:          .db $2d,$00,$3d,$39,$00,$00,$29,$00,$00,$00,$25,$21,$35,$00,$32,$31
1b1c:         :asl
1b1c:0e 00 1e 00 00 00 00 0a 
1b24:00 00 06 00 16 00 00 00 
1b2c:          .db $0e,$00,$1e,$00,$00,$00,$00,$0a,$00,$00,$06,$00,$16,$00,$00,$00
1b2c:         :bbr
1b2c:00 00 00 00 00 00 00 00 
1b34:00 0f 00 00 00 00 00 00 
1b3c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$0f,$00,$00,$00,$00,$00,$00
1b3c:         :bbs
1b3c:00 00 00 00 00 00 00 00 
1b44:00 8f 00 00 00 00 00 00 
1b4c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$8f,$00,$00,$00,$00,$00,$00
1b4c:         :bcc
1b4c:00 00 00 00 00 00 00 00 
1b54:90 00 00 00 00 00 00 00 
1b5c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$00,$00,$00,$00,$00,$00
1b5c:         :bcs
1b5c:00 00 00 00 00 00 00 00 
1b64:b0 00 00 00 00 00 00 00 
1b6c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$b0,$00,$00,$00,$00,$00,$00,$00
1b6c:         :beq
1b6c:00 00 00 00 00 00 00 00 
1b74:f0 00 00 00 00 00 00 00 
1b7c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$f0,$00,$00,$00,$00,$00,$00,$00
1b7c:         :bit
1b7c:2c 00 3c 00 00 00 89 00 
1b84:00 00 24 00 34 00 00 00 
1b8c:          .db $2c,$00,$3c,$00,$00,$00,$89,$00,$00,$00,$24,$00,$34,$00,$00,$00
1b8c:         :bmi
1b8c:00 00 00 00 00 00 00 00 
1b94:30 00 00 00 00 00 00 00 
1b9c:          .db $00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$00,$00,$00,$00
1b9c:         :bne
1b9c:00 00 00 00 00 00 00 00 
1ba4:d0 00 00 00 00 00 00 00 
1bac:          .db $00,$00,$00,$00,$00,$00,$00,$00,$d0,$00,$00,$00,$00,$00,$00,$00
1bac:         :bpl
1bac:00 00 00 00 00 00 00 00 
1bb4:10 00 00 00 00 00 00 00 
1bbc:          .db $00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00
1bbc:         :bra
1bbc:00 00 00 00 00 00 00 00 
1bc4:80 00 00 00 00 00 00 00 
1bcc:          .db $00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00
1bcc:         :bvc
1bcc:00 00 00 00 00 00 00 00 
1bd4:50 00 00 00 00 00 00 00 
1bdc:          .db $00,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00,$00,$00,$00,$00,$00
1bdc:         :bvs
1bdc:00 00 00 00 00 00 00 00 
1be4:70 00 00 00 00 00 00 00 
1bec:          .db $00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$00,$00,$00,$00
1bec:         :cmp
1bec:cd 00 dd d9 00 00 c9 00 
1bf4:00 00 c5 c1 d5 00 d2 d1 
1bfc:          .db $cd,$00,$dd,$d9,$00,$00,$c9,$00,$00,$00,$c5,$c1,$d5,$00,$d2,$d1
1bfc:         :cpx
1bfc:ec 00 00 00 00 00 e0 00 
1c04:00 00 e4 00 00 00 00 00 
1c0c:          .db $ec,$00,$00,$00,$00,$00,$e0,$00,$00,$00,$e4,$00,$00,$00,$00,$00
1c0c:         :cpy
1c0c:cc 00 00 00 00 00 c0 00 
1c14:00 00 c4 00 00 00 00 00 
1c1c:          .db $cc,$00,$00,$00,$00,$00,$c0,$00,$00,$00,$c4,$00,$00,$00,$00,$00
1c1c:         :dec
1c1c:ce 00 de 00 00 00 00 3a 
1c24:00 00 c6 00 d6 00 00 00 
1c2c:          .db $ce,$00,$de,$00,$00,$00,$00,$3a,$00,$00,$c6,$00,$d6,$00,$00,$00
1c2c:         :eor
1c2c:4d 00 5d 59 00 00 49 00 
1c34:00 00 45 41 55 00 52 51 
1c3c:          .db $4d,$00,$5d,$59,$00,$00,$49,$00,$00,$00,$45,$41,$55,$00,$52,$51
1c3c:         :inc
1c3c:ee 00 fe 00 00 00 00 1a 
1c44:00 00 e6 00 f6 00 00 00 
1c4c:          .db $ee,$00,$fe,$00,$00,$00,$00,$1a,$00,$00,$e6,$00,$f6,$00,$00,$00
1c4c:         :jmp
1c4c:4c 7c 00 00 6c 00 00 00 
1c54:00 00 00 00 00 00 00 00 
1c5c:          .db $4c,$7c,$00,$00,$6c,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1c5c:         :jsr
1c5c:20 00 00 00 00 00 00 00 
1c64:00 00 00 00 00 00 00 00 
1c6c:          .db $20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1c6c:         :lda
1c6c:ad 00 bd b9 00 00 a9 00 
1c74:00 00 a5 a1 b5 00 b2 b1 
1c7c:          .db $ad,$00,$bd,$b9,$00,$00,$a9,$00,$00,$00,$a5,$a1,$b5,$00,$b2,$b1
1c7c:         :ldx
1c7c:ae 00 00 be 00 00 a2 00 
1c84:00 00 a6 00 00 b6 00 00 
1c8c:          .db $ae,$00,$00,$be,$00,$00,$a2,$00,$00,$00,$a6,$00,$00,$b6,$00,$00
1c8c:         :ldy
1c8c:ac 00 bc 00 00 00 a0 00 
1c94:00 00 a4 00 b4 00 00 00 
1c9c:          .db $ac,$00,$bc,$00,$00,$00,$a0,$00,$00,$00,$a4,$00,$b4,$00,$00,$00
1c9c:         :lsr
1c9c:4e 00 5e 00 00 00 00 4a 
1ca4:00 00 46 00 56 00 00 00 
1cac:          .db $4e,$00,$5e,$00,$00,$00,$00,$4a,$00,$00,$46,$00,$56,$00,$00,$00
1cac:         :ora
1cac:0d 00 1d 19 00 00 09 00 
1cb4:00 00 05 01 15 00 12 11 
1cbc:          .db $0d,$00,$1d,$19,$00,$00,$09,$00,$00,$00,$05,$01,$15,$00,$12,$11
1cbc:         :rmb
1cbc:00 00 00 00 00 07 00 00 
1cc4:00 00 00 00 00 00 00 00 
1ccc:          .db $00,$00,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1ccc:         :rol
1ccc:2e 00 3e 00 00 00 00 2a 
1cd4:00 00 26 00 36 00 00 00 
1cdc:          .db $2e,$00,$3e,$00,$00,$00,$00,$2a,$00,$00,$26,$00,$36,$00,$00,$00
1cdc:         :ror
1cdc:6e 00 7e 00 00 00 00 6a 
1ce4:00 00 66 00 76 00 00 00 
1cec:          .db $6e,$00,$7e,$00,$00,$00,$00,$6a,$00,$00,$66,$00,$76,$00,$00,$00
1cec:         :sbc
1cec:ed 00 fd f9 00 00 e9 00 
1cf4:00 00 e5 e1 f5 00 f2 f1 
1cfc:          .db $ed,$00,$fd,$f9,$00,$00,$e9,$00,$00,$00,$e5,$e1,$f5,$00,$f2,$f1
1cfc:         :smb
1cfc:00 00 00 00 00 87 00 00 
1d04:00 00 00 00 00 00 00 00 
1d0c:          .db $00,$00,$00,$00,$00,$87,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
1d0c:         :sta
1d0c:8d 00 9d 99 00 00 00 00 
1d14:00 00 85 81 95 00 92 91 
1d1c:          .db $8d,$00,$9d,$99,$00,$00,$00,$00,$00,$00,$85,$81,$95,$00,$92,$91
1d1c:         :stx
1d1c:8e 00 00 00 00 00 00 00 
1d24:00 00 86 00 00 96 00 00 
1d2c:          .db $8e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$86,$00,$00,$96,$00,$00
1d2c:         :sty
1d2c:8c 00 00 00 00 00 00 00 
1d34:00 00 84 00 94 00 00 00 
1d3c:          .db $8c,$00,$00,$00,$00,$00,$00,$00,$00,$00,$84,$00,$94,$00,$00,$00
1d3c:         :stz
1d3c:9c 00 9e 00 00 00 00 00 
1d44:00 00 64 00 74 00 00 00 
1d4c:          .db $9c,$00,$9e,$00,$00,$00,$00,$00,$00,$00,$64,$00,$74,$00,$00,$00
1d4c:         :trb
1d4c:1c 00 00 00 00 00 00 00 
1d54:00 00 14 00 00 00 00 00 
1d5c:          .db $1c,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$00,$00,$00,$00,$00
1d5c:         :tsb
1d5c:0c 00 00 00 00 00 00 00 
1d64:00 00 04 00 00 00 00 00 
1d6c:          .db $0c,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00
1d6c:         ; size=$0470
1d6c:         
1d6c:         
1d6c:             .in 'memory.asm'
1d6c:         ;
1d6c:         ; runtime data
1d6c:         ; include LAST
1d6c:         
1d6c:         fpack:          ; 5 bytes of space for packed floating point number
1d6c:             .or *+5
1d71:         emit:           ; emit vector
1d71:             .or *+2
1d73:         ioPtr:          ; io stack pointer
1d73:             .or *+1
1d74:         ioDev:          ; current disk device
1d74:             .or *+1
1d75:         ioLine:         ; current line
1d75:             .or *+2
1d77:         ioFDS:          ; allocation bitmap of channels
1d77:             .or *+1
1d78:         ioLFN:          ; current logical file number
1d78:             .or *+1
1d79:         asmSP:          ; stack frame we started with
1d79:             .or *+1
1d7a:         lineSP:         ; stack frame for calls into per line assembly for error return
1d7a:             .or *+1
1d7b:         argZ:           ; first zp of zp,arg
1d7b:             .or *+1
1d7c:         ioColumn:       ; listing output column
1d7c:             .or *+1
1d7d:         pc:             ; pc
1d7d:             .or *+2
1d7f:         inputOpt:       ; input filename length
1d7f:             .or *+1
1d80:         inputName:      ; input filename
1d80:             .or *+2
1d82:         listOpt:        ; listing filename length
1d82:             .or *+1
1d83:         listName:       ; listing filename
1d83:             .or *+2
1d85:         outOpt:         ; output filename length
1d85:             .or *+1
1d86:         outName:        ; output filename
1d86:             .or *+2
1d88:         tScope:         ; save scope
1d88:             .or *+2
1d8a:         ioBufs:         ; allocated io buffers
1d8a:             .or *+$10
1d9a:             .or *%$100  ; page align
1e00:         ioBuf:          ; binary output buffer
1e00:             .or *+$100
1f00:         ioStack:        ; source file stack
1f00:             .or *+$100
2000:         eStack:         ; numeric evaluation stack
2000:             .or *+$100
2100:         lineBuf:        ; line to parse
2100:             .or *+$100
2200:         hashTable:      ; symbol hash table page
2200:             .or *+$100
2300:         symbols:        ; start of symbol table
2300:         
2300:         
2300: