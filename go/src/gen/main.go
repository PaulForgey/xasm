package main

import (
	"fmt"
	"math/bits"
	"sort"
)

func locate(n string, h []string) int {
	ptr, inc := 1, 1

	for ptr < len(h) {
		switch {
		case n == h[ptr]:
			return ptr
		case h[ptr] == "" || n > h[ptr]:
			ptr += inc
		}
		ptr += inc
		inc <<= 1
	}
	return -1
}

func encode(n string) int {
	return int(n[2]-'a') | (int(n[1]-'a') << 5) | (int(n[0]-'a') << 10)
}

func main() {
	strs := []string{
		"adc",
		"and",
		"asl",
		"bbr",
		"bbs",
		"bcc",
		"bcc",
		"bcs",
		"beq",
		"bit",
		"bmi",
		"bne",
		"bpl",
		"bra",
		"brk",
		"bvc",
		"bvs",
		"clc",
		"cld",
		"cli",
		"clv",
		"cmp",
		"cpx",
		"cpy",
		"dec",
		"dex",
		"dey",
		"eor",
		"inc",
		"inx",
		"iny",
		"jmp",
		"jsr",
		"lda",
		"ldx",
		"ldy",
		"lsr",
		"nop",
		"ora",
		"pha",
		"php",
		"phx",
		"phy",
		"pla",
		"plp",
		"plx",
		"ply",
		"rmb",
		"rol",
		"ror",
		"rti",
		"rts",
		"sbc",
		"sec",
		"sed",
		"sei",
		"smb",
		"sta",
		"stp",
		"stx",
		"sty",
		"stz",
		"tax",
		"tay",
		"trb",
		"tsb",
		"tsx",
		"txa",
		"txs",
		"tya",
		"wai",
	}

	imps := map[string]uint8{
		"brk": 0x00,
		"php": 0x08,
		"clc": 0x18,
		"plp": 0x28,
		"sec": 0x38,
		"rti": 0x40,
		"pha": 0x48,
		"cli": 0x58,
		"phy": 0x5a,
		"rts": 0x60,
		"pla": 0x68,
		"sei": 0x78,
		"ply": 0x7a,
		"dey": 0x88,
		"txa": 0x8a,
		"tya": 0x98,
		"txs": 0x9a,
		"tay": 0xa8,
		"tax": 0xaa,
		"clv": 0xb8,
		"tsx": 0xba,
		"iny": 0xc8,
		"dex": 0xca,
		"wai": 0xcb,
		"cld": 0xd8,
		"phx": 0xda,
		"stp": 0xdb,
		"inx": 0xe8,
		"nop": 0xea,
		"sed": 0xf8,
		"plx": 0xfa,
	}

	ops := map[string][16]uint8{
		//      a     (a,x) a,x   a,y   (a)   bz    #     i     r     br    z     (z,x) z,x   z,y   (z)   (z),y
		"adc": {0x6d, 0x00, 0x7d, 0x79, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x65, 0x61, 0x75, 0x00, 0x72, 0x71},
		"and": {0x2d, 0x00, 0x3d, 0x39, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x25, 0x21, 0x35, 0x00, 0x32, 0x31},
		"asl": {0x0e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00, 0x00, 0x00},
		"bbr": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bbs": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bcc": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bcs": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"beq": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bit": {0x2c, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x24, 0x00, 0x34, 0x00, 0x00, 0x00},
		"bmi": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bne": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bpl": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bra": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bvc": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"bvs": {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"cmp": {0xcd, 0x00, 0xdd, 0xd9, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0xc5, 0xc1, 0xd5, 0x00, 0xd2, 0xd1},
		"cpx": {0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00},
		"cpy": {0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00},
		"dec": {0xce, 0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0xc6, 0x00, 0xd6, 0x00, 0x00, 0x00},
		"eor": {0x4d, 0x00, 0x5d, 0x59, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x45, 0x41, 0x55, 0x00, 0x52, 0x51},
		"inc": {0xee, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0xe6, 0x00, 0xf6, 0x00, 0x00, 0x00},
		"jmp": {0x4c, 0x7c, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"jsr": {0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"lda": {0xad, 0x00, 0xbd, 0xb9, 0x00, 0x00, 0xa9, 0x00, 0x00, 0x00, 0xa5, 0xa1, 0xb5, 0x00, 0xb2, 0xb1},
		"ldx": {0xae, 0x00, 0x00, 0xbe, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0xb6, 0x00, 0x00},
		"ldy": {0xac, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0xa4, 0x00, 0xb4, 0x00, 0x00, 0x00},
		"lsr": {0x4e, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x46, 0x00, 0x56, 0x00, 0x00, 0x00},
		"ora": {0x0d, 0x00, 0x1d, 0x19, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x05, 0x01, 0x15, 0x00, 0x12, 0x11},
		"rmb": {0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"rol": {0x2e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x26, 0x00, 0x36, 0x00, 0x00, 0x00},
		"ror": {0x6e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x66, 0x00, 0x76, 0x00, 0x00, 0x00},
		"sbc": {0xed, 0x00, 0xfd, 0xf9, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0xe5, 0xe1, 0xf5, 0x00, 0xf2, 0xf1},
		"smb": {0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		"sta": {0x8d, 0x00, 0x9d, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x81, 0x95, 0x00, 0x92, 0x91},
		"stx": {0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x96, 0x00, 0x00},
		"sty": {0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x94, 0x00, 0x00, 0x00},
		"stz": {0x9c, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x74, 0x00, 0x00, 0x00},
		"trb": {0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00},
		"tsb": {0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
	}

	if len(strs) < 128 {
		pre := (128 - len(strs)) / 2
		pads := make([]string, pre)
		for n := range pads {
			pads[n] = "aaa"
		}
		strs = append(pads, strs...)
	}
	if len(strs) < 128 {
		post := (128 - len(strs))
		pads := make([]string, post)
		for n := range pads {
			pads[n] = "\x80\x80\x80"
		}
		strs = append(strs, pads...)
	}
	sort.Strings(strs)

	h := make([]string, 128)
	for n, s := range strs {
		h[bits.Reverse8(uint8(n))>>1] = s
	}

	fmt.Println("isns:")

	total := 0

	for n, s := range h {
		total += 2
		e := encode(s)
		fmt.Printf("    .dw $%04x", e)
		if e != 0 && e != 0x7fff {
			fmt.Printf(" ; %02x %s\n", n<<1, s)
		} else {
			fmt.Println()
		}
	}

	fmt.Println()
	fmt.Println("ops:")

	dups := make(map[uint8]bool)

	for _, s := range h {
		total += 2
		if s == "aaa" || s == "\x80\x80\x80" {
			fmt.Println(" .dw 0")
			continue
		}
		if i, ok := imps[s]; ok {
			if i != 0 && dups[i] {
				panic(i)
			}
			dups[i] = true
			fmt.Printf(" .dw $%02x ; %s\n", i, s)
			continue
		}
		if _, ok := ops[s]; ok {
			fmt.Printf(" .dw :%s\n", s)
			continue
		}
		panic(s)
	}
	for s, o := range ops {
		fmt.Printf(":%s\n", s)
		fmt.Printf(" .db ")
		comma := false
		for _, i := range o[:] {
			total++
			if i != 0 && dups[i] {
				panic(i)
			}
			dups[i] = true
			if comma {
				fmt.Printf(",")
			} else {
				comma = true
			}
			fmt.Printf("$%02x", i)
		}
		fmt.Println()
	}

	fmt.Printf("; size=$%04x\n\n", total)
}
